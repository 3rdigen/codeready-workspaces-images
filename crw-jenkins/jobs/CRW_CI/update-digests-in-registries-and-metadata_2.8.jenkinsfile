#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline: (none)
    // MIDSTM_BRANCH

def errorOccurred = false
def String nodeLabel = 'rhel8'
timeout(120) {
    node(nodeLabel){ 
        try { 
            stage ("Check registries") {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                        file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {

                        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                        def util = load "${WORKSPACE}/util.groovy"
                        cleanWs()
                        util.bootstrap(CRW_KEYTAB)
                        util.installSkopeoFromContainer("")
                        util.installYq()
                        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
                        println "CRW_VERSION = '" + CRW_VERSION + "'"
                        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
                        util.cloneRepo("https://github.com/redhat-developer/codeready-workspaces.git", "${WORKSPACE}/crw", MIDSTM_BRANCH)

                        def NEW_IMAGES = sh (
                            script: "cd ${WORKSPACE}/crw/product && ./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --quay --tag ${CRW_VERSION}- --hide | tee ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.new",
                            returnStdout: true
                        ).trim().split()

                        // check for Quay outage
                        if (NEW_IMAGES.toString().indexOf("No tags matching")>-1)
                        {
                            errorOccurred = true
                            error('Missing tags when reading from quay.io: may be experiencing an outage. Abort!')
                            currentBuild.result = 'ABORTED'
                        }
                        echo "------"
                        def CURRENT_IMAGES = sh (
                            script: 'cat ${WORKSPACE}/crw/dependencies/LATEST_IMAGES',
                            returnStdout: true
                        ).trim().split()
                
                        sh '''#!/bin/bash -xe
cp ${WORKSPACE}/crw/dependencies/LATEST_IMAGES{,.prev}
echo "============ LATEST_IMAGES.prev ============>"
cat ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.prev
echo "<============ LATEST_IMAGES ============"
'''

                        // compare new and curent images
                        def newSet = NEW_IMAGES as Set
                        // def currentSet = CURRENT_IMAGES as Set
                        def devfileRegistryImage = newSet.find { it.contains("devfileregistry") }
                        def pluginRegistryImage = newSet.find { it.contains("pluginregistry") } 
                        def operatorMetadataImage = newSet.find { it.contains("operator-metadata") } 
                        // echo "${pluginRegistryImage}"
                        // echo "${devfileRegistryImage}"
                        // newSet.each { echo "New: $it" }
                        // currentSet.each { echo "Current: $it" }
                        sh '''#!/bin/bash -xe
echo "============ LATEST_IMAGES.new 1 ============>"
cat ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.new
echo "<============ LATEST_IMAGES.new 1 ============"
'''

                        // don't report a diff when new operator-metadata, or we'll never get out of this recursion loop; instead report new images + registries (anything that will cause a new metadata image to be rebuilt)
                        def DIFF_LATEST_IMAGES_ANY_BUT_METADATA = sh (script: '''
diff -u0 ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.{prev,new} | \
grep -E -v "@@|dependencies/LATEST_IMAGES|operator-metadata" || true
                        ''', returnStdout: true).trim()

                        // if any image has changed that is contained IN each of the registries, then this should return a diff; otherwise an empty string
                        def DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY = sh (script: '''
# exclude new registries or metadata images; include only CRW_VERSION tagged images
diff_filtered=$(diff -u0 ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.{prev,new} | grep -E -v "@@|dependencies/LATEST_IMAGES|operator-metadata|registry" | grep ":''' + CRW_VERSION + '''" || true)

if [[ ${diff_filtered} ]]; then
    # now filter for RELEVANT images
    pushd ${WORKSPACE}/crw/dependencies/che-devfile-registry >/dev/null
        ./build/scripts/list_referenced_images.sh devfiles/ | grep codeready-workspaces | \
            sed -r -e "s#registry.redhat.io/codeready-workspaces/#quay.io/crw/#g" > ${WORKSPACE}/devfile-images-to-match.txt
    popd >/dev/null
    # check if changes are relevant to this registry and require a rebuild
    for img in $(cat ${WORKSPACE}/devfile-images-to-match.txt); do
        echo "$diff_filtered" | grep "$img" || true
    done
    rm -f ${WORKSPACE}/devfile-images-to-match.txt
fi
                        ''', returnStdout: true).trim()
                        def DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY = sh (script: '''
# exclude new registries or metadata images; include only CRW_VERSION tagged images
diff_filtered=$(diff -u0 ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.{prev,new} | grep -E -v "@@|dependencies/LATEST_IMAGES|operator-metadata|registry" | grep ":''' + CRW_VERSION + '''" || true)

if [[ ${diff_filtered} ]]; then
    # now filter for RELEVANT images
    pushd ${WORKSPACE}/crw/dependencies/che-plugin-registry >/dev/null
        ./build/scripts/list_referenced_images.sh v3/ | grep codeready-workspaces | \
            sed -r -e "s#registry.redhat.io/codeready-workspaces/#quay.io/crw/#g" > ${WORKSPACE}/plugin-images-to-match.txt
    popd >/dev/null
    # check if changes are relevant to this registry and require a rebuild
    for img in $(cat ${WORKSPACE}/plugin-images-to-match.txt); do
        echo "$diff_filtered" | grep "$img" || true
    done
    rm -f ${WORKSPACE}/plugin-images-to-match.txt
fi
                        ''', returnStdout: true).trim()

                        // check diff including operator metadata and registries, in case we forgot to update metadata
                        def DIFF_LATEST_IMAGES_METADATA_ONLY = sh (script: '''
diff -u0 ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.{prev,new} | \
grep -E -v "@@|dependencies/LATEST_IMAGES" | grep "operator-metadata" || true
                        ''', returnStdout: true).trim()

                        // define what to do when we are ready to push changes
                        def COMMITCHANGES = '''#!/bin/bash -xe
                            pushd ${WORKSPACE}/crw >/dev/null

                            # regenerate LATEST_IMAGES, LATEST_IMAGES_COMMITS, and LATEST_IMAGES_DIGESTS.json
                            ./dependencies/LATEST_IMAGES.sh

                            echo "============ LATEST_IMAGES new 3 ============>"
                            cat dependencies/LATEST_IMAGES
                            echo "<============ LATEST_IMAGES new 3 ============"

                            # commit changes
                            git add dependencies/LATEST_IMAGES* || true
                            git commit -m "[update] Update dependencies/LATEST_IMAGES" dependencies/LATEST_IMAGES*
                            git pull origin ''' + MIDSTM_BRANCH + ''' || true
                            git push origin ''' + MIDSTM_BRANCH + '''

                            popd >/dev/null
                        '''

                        currentBuild.description="Checking for changed images..."

                        if (!DIFF_LATEST_IMAGES_METADATA_ONLY.equals("") && DIFF_LATEST_IMAGES_ANY_BUT_METADATA.equals("")) { 
                            // no changes, but a newer metadata image exists
                            currentBuild.description="New metadata image detected: commit changes to LATEST_IMAGES"
                            echo currentBuild.description
                            echo DIFF_LATEST_IMAGES_METADATA_ONLY

                            sh COMMITCHANGES
                            currentBuild.result='UNSTABLE'
                        } else if (DIFF_LATEST_IMAGES_ANY_BUT_METADATA.equals("")) { 
                            // no changes
                            currentBuild.description="No new images detected, including registries: nothing to do!"
                            echo currentBuild.description
                            currentBuild.result='UNSTABLE'
                        } else {
                            // changes that don't include a registry rebuild itself, but rather images ref'd by registries
                            if (!DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY.equals("") || !DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY.equals("")) {
                                currentBuild.description="Detected new images (not registries): rebuild registries + operator-metadata"
                                listChangedImages=(DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY+"\n"+DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY).replaceAll("quay.io/crw/|:.+|-rhel8|crw-2|\n|\r|^(-|\\+)","").replaceAll("-|\\+",",").tokenize(',').unique()
                                for (String imgChanged : listChangedImages) { currentBuild.description += "<br/>* " + imgChanged }
                                echo currentBuild.description
                                echo "================================================>"
                                echo "All changes (excluding metadata):"
                                echo DIFF_LATEST_IMAGES_ANY_BUT_METADATA
                                echo "<================================================"
                                if (!DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY.equals("")) {
                                    echo "================================================>"
                                    echo "Devfile changes:"
                                    echo DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY
                                    echo "<================================================"
                                }
                                if (!DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY.equals("")) {
                                    echo "================================================>"
                                    echo "Plugin registry changes:"
                                    echo DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY
                                    echo "<================================================"
                                }
                                parallel devfileregistry: {
                                    if (!DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY.equals("")) {
                                        build(
                                            job: 'crw-devfileregistry_' + JOB_BRANCH,
                                            wait: true,
                                            propagate: true,
                                            parameters: [[$class: 'BooleanParameterValue', name: 'FORCE_BUILD', value: true]]
                                        )
                                    } else {
                                        echo "[INFO] No child images of devfile registry changed: nothing to rebuild."
                                    }
                                }, pluginregistry: {
                                    if (!DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY.equals("")) {
                                        build(
                                            job: 'crw-pluginregistry_' + JOB_BRANCH,
                                            wait: true,
                                            propagate: true,
                                            parameters: [[$class: 'BooleanParameterValue', name: 'FORCE_BUILD', value: true]]
                                        )
                                    } else {
                                        echo "[INFO] No child images of plugin registry changed: nothing to rebuild."
                                    }
                                }
                                //parallel jobs
                                while (true) {
                                    def REBUILT_IMAGES = sh (
                                    script: "cd ${WORKSPACE}/crw/product && ./getLatestImageTags.sh -c 'crw/devfileregistry-rhel8 crw/pluginregistry-rhel8' --quay --tag ${CRW_VERSION}- --hide",
                                    returnStdout: true
                                    ).trim().split()
                                    def rebuiltImagesSet = REBUILT_IMAGES as Set
                                    def rebuiltDevfileRegistryImage = rebuiltImagesSet.find { it.contains("devfileregistry") }
                                    if (!DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY.equals("")) { echo "${rebuiltDevfileRegistryImage}" }
                                    def rebuiltPluginRegistryImage = rebuiltImagesSet.find { it.contains("pluginregistry") } 
                                    if (!DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY.equals("")) { echo "${rebuiltPluginRegistryImage}" }
                                    // if we need both registries to be rebuilt
                                    if (
                                        !DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY.equals("") && !rebuiltDevfileRegistryImage.equals(devfileRegistryImage) &&
                                        !DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY.equals("") && !rebuiltPluginRegistryImage.equals(pluginRegistryImage)) {
                                        echo "Devfile and plugin registries have been rebuilt!"
                                        break
                                    // if we need just one registry to be rebuilt
                                    } else if (!DIFF_LATEST_IMAGES_IN_DEVFILE_REGISTRY.equals("") && !rebuiltDevfileRegistryImage.equals(devfileRegistryImage)) {
                                        echo "Devfile registry has been rebuilt!"
                                        break
                                    // if we need just one registry to be rebuilt
                                    } else if (!DIFF_LATEST_IMAGES_IN_PLUGIN_REGISTRY.equals("") && !rebuiltPluginRegistryImage.equals(pluginRegistryImage)) {
                                        echo "Plugin registry has been rebuilt!"
                                        break
                                    }
                                    sleep(time:120,unit:"SECONDS")
                                }
                                sh '''#!/bin/bash -xe
echo "============ LATEST_IMAGES.new 2 ============>"
cat ${WORKSPACE}/crw/dependencies/LATEST_IMAGES.new
echo "<============ LATEST_IMAGES.new 2 ============"
'''
                            } else {
                                currentBuild.description="Detected new images: rebuild operator-metadata"
                                listChangedImages=(DIFF_LATEST_IMAGES_ANY_BUT_METADATA).replaceAll("quay.io/crw/|:.+|-rhel8|crw-2|\n|\r|^(-|\\+)","").replaceAll("-|\\+",",").tokenize(',').unique()
                                for (String imgChanged : listChangedImages) { currentBuild.description += "<br/>* " + imgChanged }
                                echo currentBuild.description
                                echo DIFF_LATEST_IMAGES_ANY_BUT_METADATA
                            }

                            build(
                                job: 'crw-operator-metadata_' + JOB_BRANCH,
                                wait: true,
                                propagate: true,
                                parameters: [[$class: 'BooleanParameterValue', name: 'FORCE_BUILD', value: true]]
                            )

                            while (true) 
                            {
                                def rebuiltOperatorMetadataImage = sh (
                                script: "cd ${WORKSPACE}/crw/product && ./getLatestImageTags.sh -c 'crw/crw-2-rhel8-operator-metadata' --quay --tag ${CRW_VERSION}- --hide",
                                returnStdout: true
                                ).trim()
                                echo "${rebuiltOperatorMetadataImage}"
                                if (rebuiltOperatorMetadataImage!=operatorMetadataImage) {
                                    echo "Operator metadata has been rebuilt!"
                                    break
                                }
                                sleep(time:120,unit:"SECONDS")
                            }

                            sh COMMITCHANGES
                        }
                        archiveArtifacts fingerprint: false, artifacts:"crw/dependencies/LATEST_IMAGES*"
                        
                    } // with
                } // wrap
            } // stage
        } catch (e) {
            if (errorOccurred) {
                util.notifyBuildFailed()
                return
            }
            throw e
        } // try-catch
    } // node
} // timeout