#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// SOURCE_BRANCH
// MIDSTM_BRANCH
// FORCE_BUILD

def SOURCE_REPO = "eclipse/che-plugin-broker" // upstream source repo from which to find and sync commits to midstream repo
def MIDSTM_REPO = "redhat-developer/codeready-workspaces-images" // repo to use as target
def SYNC_REPO1 = "pluginbroker-metadata" // also used for the Brew dockerfile params
def SYNC_REPO2 = "pluginbroker-artifacts" // also used for the Brew dockerfile params
def SYNC_FILES = "brokers build cfg common CONTRIBUTING.md .dockerignore devfile.yaml .gitignore go.mod go.sum LICENSE Makefile model README.md utils vendor VERSION"

def OLD_SHA=""
def NEW_SHA1=""
def NEW_SHA2=""
def SOURCE_SHA=""

def nodeLabel = "rhel8"
timeout(120) {
  node("${nodeLabel}"){ 
    stage ("Sync repos") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        cleanWs()
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        util.installSkopeoFromContainer("")
        util.installYq()
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
          file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
          util.bootstrap(CRW_KEYTAB)

          println "########################################################################################################"
          println "##  Clone and update github.com/${SOURCE_REPO}.git"
          println "########################################################################################################"
          SOURCE_DIR="${WORKSPACE}/sources"
          util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
          SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")
          println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

          println "########################################################################################################"
          println "##  Sync ${SYNC_REPO1} and ${SYNC_REPO2} to codeready-workspaces-images"
          println "########################################################################################################"
          util.cloneRepo("https://github.com/${MIDSTM_REPO}", "${WORKSPACE}/target", MIDSTM_BRANCH)
          OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/target")
          TARGET_DIR1="${WORKSPACE}/target/" + util.getCRWLongName(SYNC_REPO1)
          TARGET_DIR2="${WORKSPACE}/target/" + util.getCRWLongName(SYNC_REPO2)
          println "Got OLD_SHA in sources folder: " + OLD_SHA

          // rsync files to codeready-workspaces-images
          sh('''#!/bin/bash -xe
            SOURCEDIR="''' + SOURCE_DIR + '''"
            TARGETDIR1="''' + TARGET_DIR1 + '''"
            TARGETDIR2="''' + TARGET_DIR2 + '''"
            SYNC_FILES="''' + SYNC_FILES + '''"
            [ ! -d ${TARGETDIR1} ] && mkdir -p ${TARGETDIR1}
            [ ! -d ${TARGETDIR2} ] && mkdir -p ${TARGETDIR2}
            for targetN in $TARGETDIR1 $TARGETDIR2; do
              for d in ${SYNC_FILES}; do
                if [[ -f ${SOURCEDIR}/${d} ]]; then
                  rsync -zrlt ${SOURCEDIR}/${d} ${targetN}/${d}
                elif [[ -d ${SOURCEDIR}/${d} ]]; then
                  # copy over the files
                  rsync -zrlt ${SOURCEDIR}/${d}/* ${targetN}/${d}/
                  # sync the directory and delete from target if deleted from source
                  rsync -zrlt --delete ${SOURCEDIR}/${d}/ ${targetN}/${d}/
                fi
              done
            done
          ''')

          sh('''#!/bin/bash -xe
            SOURCEDIR="''' + SOURCE_DIR + '''"
            TARGETDIR1="''' + TARGET_DIR1 + '''"
            TARGETDIR2="''' + TARGET_DIR2 + '''"
            for targetN in $TARGETDIR1 $TARGETDIR2; do
              # apply changes from upstream che-pluginbroker/build/*/rhel.Dockerfile to downstream Dockerfile
              SOURCEDOCKERFILE=""
              TARGETDOCKERFILE=""
              if [[ \$targetN == "${TARGETDIR1}" ]]; then
                SOURCEDOCKERFILE="${SOURCEDIR}/build/metadata/rhel.Dockerfile"
                TARGETDOCKERFILE="${TARGETDIR1}/Dockerfile"
                QUAY_PROJECT="''' + SYNC_REPO1 + '''"
              elif [[ \$targetN == "${TARGETDIR2}" ]]; then
                SOURCEDOCKERFILE="${SOURCEDIR}/build/artifacts/rhel.Dockerfile"
                TARGETDOCKERFILE="${TARGETDIR2}/Dockerfile"
                QUAY_PROJECT="''' + SYNC_REPO2 + '''"
              fi

              CRW_VERSION="''' + CRW_VERSION_F + '''"
              #apply patches
              if [[ ${SOURCEDOCKERFILE} != "" ]] && [[ ${TARGETDOCKERFILE} != "" ]]; then
                sed ${SOURCEDOCKERFILE} \
                  -e "s#FROM registry.redhat.io/#FROM #g" \
                  -e "s#FROM registry.access.redhat.com/#FROM #g" \
                  > ${TARGETDOCKERFILE}
              fi

              METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces '${QUAY_PROJECT}' container" \\\r
DESCRIPTION="Red Hat CodeReady Workspaces '${QUAY_PROJECT}' container" \\\r
PRODNAME="codeready-workspaces" \\\r
COMPNAME="'${QUAY_PROJECT}'-rhel8" \r
LABEL summary="$SUMMARY" \\\r
description="$DESCRIPTION" \\\r
io.k8s.description="$DESCRIPTION" \\\r
io.k8s.display-name=\"$DESCRIPTION" \\\r
io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
name="$PRODNAME/$COMPNAME" \\\r
version="'${CRW_VERSION}'" \\\r
license="EPLv2" \\\r
maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
io.openshift.expose-services="" \\\r
usage="" \r'

              echo -e "$METADATA" >> ${TARGETDOCKERFILE}
            done
          ''')

          // push changes in github to codeready-workspaces-images
          util.updateBaseImages(TARGET_DIR1, MIDSTM_BRANCH, "--nocommit")
          util.updateBaseImages(TARGET_DIR2, MIDSTM_BRANCH, "--nocommit")
          sh('''#!/bin/bash -xe
            SYNC_FILES="''' + SYNC_FILES + '''"
            cd ${WORKSPACE}/target
            git add ''' + util.getCRWLongName(SYNC_REPO1) + '''
            git add ''' + util.getCRWLongName(SYNC_REPO2) + '''
            git update-index --refresh || true # ignore timestamp updates
            if [[ \$(git diff-index HEAD --) ]]; then # file changed
              cd ''' + TARGET_DIR1 + '''
              git add Dockerfile ${SYNC_FILES} . -A -f
              cd ''' + TARGET_DIR2 + '''
              git add Dockerfile ${SYNC_FILES} . -A -f
              # note this might fail if we're syncing from a tag vs. a branch
              git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" || true
              git push origin ''' + MIDSTM_BRANCH + ''' || true
              echo "[sync] Updated  @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
            fi
          ''')
          NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/target")
          println "Got NEW_SHA in target folder: " + NEW_SHA
          currentBuild.description="Upstream sync done"

          if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
            currentBuild.result='UNSTABLE'
          }

          println "########################################################################################################"
          println "##  Kickoff Sync to downstream job"
          println "########################################################################################################"
          if (!OLD_SHA.equals(NEW_SHA) || FORCE_BUILD == "true") {
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            build(
                job: 'sync-to-downstream_' + JOB_BRANCH,
                wait: true,
                propagate: true,
                parameters: [
                  [
                    $class: 'StringParameterValue',
                    name: 'token',
                    value: "CI_BUILD"
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'cause',
                    value: SYNC_REPO1 + "+" + SYNC_REPO2 + "+respin+by+${BUILD_TAG}"
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'REPOS',
                    value: util.getCRWLongName(SYNC_REPO1) + ", " + util.getCRWLongName(SYNC_REPO2)
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'JOB_BRANCH',
                    value: JOB_BRANCH
                  ],
                  [
                    $class: 'StringParameterValue',
                    name: 'MIDSTM_BRANCH',
                    value: "${MIDSTM_BRANCH}"
                  ],
                  [
                    $class: 'BooleanParameterValue',
                    name: 'FORCE_BUILD',
                    value: FORCE_BUILD
                  ],
                  [
                    $class: 'BooleanParameterValue',
                    name: 'SCRATCH',
                    value: false
                  ]
                ]
              )
            currentBuild.description+="; Downstream sync job triggered"
          } else {
            println "No changes upstream, nothing to sync / build in brew!"
            currentBuild.description+="; No sync or Brew build"
            currentBuild.result = 'UNSTABLE'
          }        

        } // withCredentials
      } // wrap
    } // stage
  } // node
} // timeout