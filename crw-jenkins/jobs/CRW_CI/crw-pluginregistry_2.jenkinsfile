#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// def FORCE_BUILD = "false"
// MIDSTM_BRANCH

// TODO source from eclipse/che-plugin-registry too

def MIDSTM_REPO = "redhat-developer/codeready-workspaces" //source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-pluginregistry" // dist-git repo to use as target
def DWNSTM_BRANCH = MIDSTM_BRANCH // target branch in dist-git repo, eg., crw-2.y-rhel-8
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def SYNC_REPO = "pluginregistry" // also used for the Brew dockerfile params
def USE_DIGESTS = "true" // if true, use @sha256:digest in registry; if false, use :tag
def SYNC_FILES="build openshift v3 .gitignore .htaccess LICENSE README.md VERSION"

def OLD_SHA_MID=""
def OLD_SHA_DWN=""
def NEW_SHA_MID=""
def NEW_SHA_DWN=""

def buildNode = "rhel8" // node label
timeout(120) {
	node("${buildNode}"){ stage "Sync repos"
    wrap([$class: 'TimestamperBuildWrapper']) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
      def util = load "${WORKSPACE}/util.groovy"
      cleanWs()
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      util.installSkopeoFromContainer("registry.redhat.io/rhel8/skopeo")
      util.installRhpkg()
      withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
        file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${MIDSTM_REPO}.git"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${MIDSTM_REPO}.git", "${WORKSPACE}/targetmid", MIDSTM_BRANCH)
        OLD_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/targetmid")
        println "Got OLD_SHA_MID in targetmid folder: " + OLD_SHA_MID
        SOURCE_DIR="${WORKSPACE}/targetmid/dependencies/che-plugin-registry/"

        // Check if che-machine-exec and che-theia plugins are current in upstream repo and if not, add them
        sh('''#!/bin/bash -xe
          cd ''' + SOURCE_DIR + '''
          ./build/scripts/add_che_plugins.sh -b ''' + MIDSTM_BRANCH + ''' $(cat ${WORKSPACE}/targetmid/pom.xml | grep -E "<che.version>" | sed -r -e "s#.+<che.version>(.+)</che.version>#\\1#")
        ''')

        util.updateBaseImages(SOURCE_DIR + "build/dockerfiles", DWNSTM_BRANCH)

        NEW_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/targetmid")
        println "Got NEW_SHA_MID in targetmid folder: " + NEW_SHA_MID

        println "########################################################################################################"
        println "##  Sync ${SYNC_REPO} to pkgs.devel"
        println "########################################################################################################"
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", DWNSTM_BRANCH)
        OLD_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got OLD_SHA_DWN in targetdwn folder: " + OLD_SHA_DWN

        // rsync files in github to dist-git
        sh('''#!/bin/bash -xe
          SOURCEDIR="''' + SOURCE_DIR + '''"
          SYNC_FILES="''' + SYNC_FILES + '''"
          for d in ${SYNC_FILES}; do
            if [[ -f ${SOURCEDIR}/${d} ]]; then
              rsync -azrlt ${SOURCEDIR}/${d} ${WORKSPACE}/targetdwn/${d}
            elif [[ -d ${SOURCEDIR}/${d} ]]; then
              # copy over the dir contents
              rsync -azrlt ${SOURCEDIR}/${d}/* ${WORKSPACE}/targetdwn/${d}/
              # sync the directory and delete from targetdwn if deleted from source
              rsync -azrlt --delete ${SOURCEDIR}/${d}/ ${WORKSPACE}/targetdwn/${d}/
            else
              echo "[WARN] Could not find ${SOURCEDIR}/${d} to sync to ${WORKSPACE}/targetdwn/${d}"
            fi
          done
        ''')

        sh('''#!/bin/bash -xe
          cp -f ''' + SOURCE_DIR + '''build/dockerfiles/Dockerfile  ${WORKSPACE}/targetdwn/Dockerfile
          CRW_VERSION="''' + CRW_VERSION_F + '''"
          # apply patches to transform CRW upstream to pkgs.devel version
          sed -i ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            `# Replace image used for registry with rhel8/httpd-24` \
            -e 's|^ *FROM registry.access.redhat.com/.* AS registry|# &|' \
            -e 's|# *(FROM.*rhel8/httpd.*)|\\1|' \
            `# Strip registry from image references` \
            -e 's|FROM registry.access.redhat.com/|FROM |' \
            -e 's|FROM registry.redhat.io/|FROM |' \
            `# Set arg options: enable USE_DIGESTS and disable BOOTSTRAP` \
            -e 's|ARG USE_DIGESTS=.*|ARG USE_DIGESTS=''' + USE_DIGESTS + '''|' \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=false|' \
            `# Enable offline build - copy in built binaries` \
            -e 's|# (COPY root-local.tgz)|\\1|' \
            `# only enable rhel8 here -- don't want centos or epel ` \
            -e 's|^ *(COPY .*)/content_set.*repo (.+)|\\1/content_sets_rhel8.repo \\2|' \
            `# Comment out PATCHED_* args from build and disable update_devfile_patched_image_tags.sh` \
            -e 's|^ *ARG PATCHED.*|# &|' \
            -e '/^ *RUN TAG/,+3 s|.*|# &| ' \
            `# Disable intermediate build targets` \
            -e 's|^ *FROM registry AS offline-registry|# &|' \
            -e '/^ *FROM builder AS offline-builder/,+3 s|.*|# &|' \
            -e 's|^[^#]*--from=offline-builder.*|# &|' \
            `# Enable cache_artifacts.sh` \
            -e '\\|swap_images.sh|i # Cache projects in CRW \\
COPY ./build/dockerfiles/rhel.cache_artifacts.sh resources.tgz /tmp/ \\
RUN /tmp/rhel.cache_artifacts.sh /build/v3/ && rm -rf /tmp/rhel.cache_artifacts.sh /tmp/resources.tgz \\
'
          METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'
          echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
          echo "======= DOWNSTREAM DOCKERFILE =======>"
          cat ${WORKSPACE}/targetdwn/Dockerfile
          echo "<======= DOWNSTREAM DOCKERFILE ======="
        ''')

        // push changes in github to dist-git
        util.updateBaseImages("${WORKSPACE}/targetdwn", DWNSTM_BRANCH, "--nocommit")
        sh('''#!/bin/bash -xe
export KRB5CCNAME=/var/tmp/crw-build_ccache
SYNC_FILES="''' + SYNC_FILES + '''"
cd ${WORKSPACE}/targetdwn
if [[ \$(git diff --name-only) ]]; then # file changed
  git add Dockerfile ${SYNC_FILES}
  # note this might fail if we're syncing from a tag vs. a branch
  git commit -s -m "[sync] Update from ''' + MIDSTM_REPO + ''' @ ''' + NEW_SHA_MID + '''" Dockerfile ${SYNC_FILES}
  git push origin ''' + DWNSTM_BRANCH + ''' || true
  echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + MIDSTM_REPO + ''' @ ''' + NEW_SHA_MID + '''"
fi
        ''')

        println "########################################################################################################"
        println "##  Update the tarballs"
        println "########################################################################################################"
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          # step 1 - build the container
          cd ${WORKSPACE}/targetdwn
          # transform Brew friendly Dockerfile so we can use it in Jenkins where base images need full registry path
          sed ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            -e 's|COPY (.*) resources.tgz (.*)|COPY \\1 \\2|' \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=true|' \
            `# enable LATEST_ONLY for bootstrap build only` \
            -e 's|ARG LATEST_ONLY=.*|ARG LATEST_ONLY=true|' \
            -e 's|ARG USE_DIGESTS=.*|ARG USE_DIGESTS=''' + USE_DIGESTS + '''|' \
            -e 's|^ *COPY root-local.tgz|# &|' \
            `# replace org/container:tag with reg-proxy/rh-osbs/org-container:tag` \
            -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1-\\2:\\3#" \
            `# replace ubi8-minimal:tag with reg-proxy/rh-osbs/ubi-minimal:tag` \
            -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1:\\2#" \
            -e 's|# (COPY .*content_sets.*)|\\1|' \
            > ${WORKSPACE}/bootstrap.Dockerfile
          echo "======= BOOTSTRAP DOCKERFILE =======>"
          cat ${WORKSPACE}/bootstrap.Dockerfile
          echo "<======= BOOTSTRAP DOCKERFILE ======="
          echo "======= START BOOTSTRAP BUILD =======>"
          # do not need digests in the BOOTSTRAP build so override default with false
          CONTAINERNAME="''' + SYNC_REPO + '''offline"
          docker build -t ${CONTAINERNAME} . --no-cache -f ${WORKSPACE}/bootstrap.Dockerfile \
            --target builder --build-arg BOOTSTRAP=true --build-arg USE_DIGESTS=false
          echo "<======= END BOOTSTRAP BUILD ======="
          # update tarballs - step 2 - check old sources' tarballs
          cd ${WORKSPACE}/targetdwn
          # TODO is there a better way to determine if we need to push sources?
          rhpkg sources
          # update tarballs - step 3 - create tarballs in targetdwn folder
          # NOTE: used to be in /root/.local but now can be found in /opt/app-root/src/.local
          mkdir -p /tmp/root-local/ && docker run --rm -v \
            /tmp/root-local/:/tmp/root-local/ ${CONTAINERNAME} /bin/bash \
            -c 'cd /opt/app-root/src/.local/ && cp -r bin/ lib/ /tmp/root-local/'
          # check diff
          BEFORE_DIR=/tmp/root-local-before
          rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/root-local.tgz -C ${BEFORE_DIR}
          TAR_DIFF=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/root-local -x "*.pyc" -x "installed-files.txt") || true
          if [[ ${TAR_DIFF} ]]; then
            echo "DIFF START *****"
            echo "${TAR_DIFF}"
            echo "***** END DIFF"
            pushd /tmp/root-local >/dev/null && sudo tar czf root-local.tgz lib/ bin/ && popd >/dev/null && mv -f /tmp/root-local/root-local.tgz . && sudo rm -fr /tmp/root-local/
          fi
          mkdir -p /tmp/''' + SYNC_REPO + '''-resources/
          docker run --rm -v /tmp/''' + SYNC_REPO + '''-resources/:/tmp/''' + SYNC_REPO + '''-resources/ \
            --entrypoint /bin/bash ${CONTAINERNAME} -c \
            "cd /build && cp -r v3/* /tmp/''' + SYNC_REPO + '''-resources/"
          # check diff
          if [[ -f ${WORKSPACE}/targetdwn/resources.tgz ]]; then
            BEFORE_DIR=/tmp/''' + SYNC_REPO + '''-resources-before
            rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/resources.tgz -C ${BEFORE_DIR}
            TAR_DIFF2=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/''' + SYNC_REPO + '''-resources -x "resources/*" -x "*.vsix" -x "*.theia") || true
          else
            TAR_DIFF2="No such file ${WORKSPACE}/targetdwn/resources.tgz -- creating a new one for the first time"
          fi
          if [[ ${TAR_DIFF2} ]]; then
            echo "DIFF START *****"
            echo "${TAR_DIFF2}"
            echo "***** END DIFF"
            pushd /tmp/''' + SYNC_REPO + '''-resources/ >/dev/null && \
              sudo tar czf resources.tgz ./* && \
              popd >/dev/null && \
              mv -f /tmp/''' + SYNC_REPO + '''-resources/resources.tgz . && \
              sudo rm -fr /tmp/''' + SYNC_REPO + '''-resources/
          fi
          # update tarballs - step 4 - commit changes if diff different
          if [[ ${TAR_DIFF} ]] || [[ ${TAR_DIFF2} ]]; then
            hasChanged=1
            git pull origin ''' + DWNSTM_BRANCH + ''' || true
            rhpkg new-sources root-local.tgz resources.tgz
            git commit -s -m "[tgz] Update root-local.tgz and resources.tgz" sources
            git push origin ''' + DWNSTM_BRANCH + '''
          else
            echo "No changes since previous tarball was created."
          fi
          # clean up diff dirs
          sudo rm -fr /tmp/root-local /tmp/root-local-before /tmp/''' + SYNC_REPO + '''-resources /tmp/''' + SYNC_REPO + '''-resources-before
        ''')
        NEW_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got NEW_SHA_DWN in targetdwn folder: " + NEW_SHA_DWN

        if (NEW_SHA_DWN.equals(OLD_SHA_DWN) && NEW_SHA_MID.equals(OLD_SHA_MID) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      } // withCredentials
    } // wrap
  } // node
} // timeout

// kick off get-sources-rhpkg-container-build_2.y job
node(buildNode) {
  stage ("Build container on ${buildNode}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} container"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA_MID.equals(OLD_SHA_MID) || !NEW_SHA_DWN.equals(OLD_SHA_DWN) || FORCE_BUILD == "true") {
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        build(
              job: 'get-sources-rhpkg-container-build_' + CRW_VERSION,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_PATHs',
                  value: "${DWNSTM_REPO}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'QUAY_REPO_PATHs',
                  value: util.getCRWShortName(SYNC_REPO) + "-rhel8"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: "${CRW_VERSION}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: FORCE_BUILD
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: SCRATCH
                ]
              ]
        )
        currentBuild.description="Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description="No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
