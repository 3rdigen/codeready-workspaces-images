#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// SOURCE_BRANCH
// MIDSTM_BRANCH
// nodeVersion
// yarnVersion
// CONTAINERS
// PLATFORMS

// other params not worth setting in Jenkins (they don't change)
def THEIA_BRANCH = "master" // theia branch/tag to build: master (will then compute the correct SHA to use)
def THEIA_GITHUB_REPO = "eclipse-theia/theia" // default: eclipse-theia/theia; optional: redhat-developer/eclipse-theia
def THEIA_COMMIT_SHA = "" // leave blank to compute within build.sh; or look at https://github.com/eclipse-che/che-theia/blob/7.y.x/build.include#L16 = 4641a298

// Nodes to run artifact build on ex. ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabels = ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List req_platforms = PLATFORMS.tokenize(",").collect { it.trim() }
def List platforms = []
def Map tasks = [failFast: false]
timeout(120) {
  def String nodeLabel = "${nodeLabels[0]}"
  node(nodeLabel) {
    stage ("SCM Poll: Che Theia + update from.dockerfile stubs") {
      withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        sh "mkdir -p tmp"
        util.cloneRepoWithBootstrap("https://github.com/eclipse-che/che-theia.git", "tmp/che-theia", SOURCE_BRANCH, true)

        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        util.installSkopeoFromContainer("")
        util.installYq()
        // updateBaseImages.sh -b 7.30.x -w dockerfiles -f \*from.dockerfile -maxdepth 5
        util.updateBaseImages("tmp/che-theia", SOURCE_BRANCH, "-w dockerfiles -f \\*from.dockerfile -maxdepth 5", MIDSTM_BRANCH)

        sh "rm -fr tmp"
      } // with
    } // stage

    stage ("Update CRW Theia base images and build params on " + nodeLabel) {
      wrap([$class: 'TimestamperBuildWrapper']) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        cleanWs()
        util.cloneRepoWithBootstrap("https://github.com/redhat-developer/codeready-workspaces-theia.git", "${WORKSPACE}/crw-theia", MIDSTM_BRANCH, true)
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB'),
            string(credentialsId: 'quay.io-crw-crwci_user_token', variable: 'QUAY_TOKEN')]) {
          CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
          println "CRW_VERSION = '" + CRW_VERSION + "'"

          // TODO CRW-1609 implement tag deletion option (as script to delete quay images for a given CRW_VERSION)
          // if (cleanTmpImages == "true") {
              // println "TODO: Delete tmp images from Quay"
              // https://docs.quay.io/api/swagger/#!/tag/deleteFullTag
              // $âž” curl -H 'Accept: application/json' -H "Authorization: Bearer token-here" -X DELETE https://quay.io/api/v1/repository/crw/theia-endpoint-rhel8/tag/TAG-HERE
              // sh('curl -sSL -H "Authorization: Bearer " ...')
          // }

          // set up build command, using -ci- image tags 
          def BUILD_PARAMS="--nv ${nodeVersion} --cv ${CRW_VERSION} --ctb ${SOURCE_BRANCH} --tb ${THEIA_BRANCH} --tgr ${THEIA_GITHUB_REPO} --no-cache --rm-cache --rmi:all --no-async-tests --ci"
          // commit changes into crw-theia/dockerfiles/ directly, so we can more easily sync to lower-midstream (crw-images) and downstream (pkgs.devel)
          BUILD_PARAMS=BUILD_PARAMS+" --commit"

          // define which containers to build via flags to build.sh
          if (CONTAINERS.trim().contains("codeready-workspaces-theia-dev")) { BUILD_PARAMS=BUILD_PARAMS+" -d" }
          if (CONTAINERS.trim().contains("codeready-workspaces-theia,") || CONTAINERS.trim().equals("codeready-workspaces-theia")) { BUILD_PARAMS=BUILD_PARAMS+" -t" }
          if (CONTAINERS.trim().contains("codeready-workspaces-theia-endpoint")) { BUILD_PARAMS=BUILD_PARAMS+" -e" }

          if (!THEIA_COMMIT_SHA.equals("")) {
            BUILD_PARAMS=BUILD_PARAMS+" --tcs ${THEIA_COMMIT_SHA}";
          } else {
            THEIA_COMMIT_SHA = sh(script: '''#!/bin/bash -xe
pushd /tmp >/dev/null || true
curl -sSLO https://raw.githubusercontent.com/eclipse-che/che-theia/''' + SOURCE_BRANCH + '''/build.include
export "$(cat build.include | egrep "^THEIA_COMMIT_SHA")" && THEIA_COMMIT_SHA=${THEIA_COMMIT_SHA//\\"/}
popd >/dev/null || true
echo -n $THEIA_COMMIT_SHA
''', returnStdout: true).trim()
            echo "[INFO] Store Eclipse Theia commit SHA THEIA_COMMIT_SHA = ${THEIA_COMMIT_SHA}"
          }

          // create BUILD_PARAMS and BUILD_COMMAND files to store latest build params
          sh """
pushd crw-theia >/dev/null
echo nodeVersion=${nodeVersion} > BUILD_PARAMS
echo yarnVersion=${yarnVersion} >> BUILD_PARAMS
echo CRW_VERSION=${CRW_VERSION} >> BUILD_PARAMS
echo SOURCE_BRANCH=${SOURCE_BRANCH} >> BUILD_PARAMS
echo THEIA_BRANCH=${THEIA_BRANCH} >> BUILD_PARAMS
echo THEIA_GITHUB_REPO=${THEIA_GITHUB_REPO} >> BUILD_PARAMS
echo THEIA_COMMIT_SHA=${THEIA_COMMIT_SHA} >> BUILD_PARAMS

echo ./build.sh ${BUILD_PARAMS} > BUILD_COMMAND
git add BUILD_COMMAND BUILD_PARAMS || true
git commit -s -m "[update] BUILD_PARAMS + BUILD_COMMAND (${SOURCE_BRANCH}, ${THEIA_COMMIT_SHA})" BUILD_COMMAND BUILD_PARAMS || true
git pull origin ${MIDSTM_BRANCH} || true
git push origin ${MIDSTM_BRANCH} || true
popd >/dev/null
"""
        } // with
      } // wrap
    } // stage
  } // node
} // timeout


for (int i=0; i < nodeLabels.size(); i++) {
  def String nodeLabel = "${nodeLabels[i]}"
  print "[" + (i+1) + "/" + nodeLabels.size() + "] Create task to run on ${nodeLabel}"
  tasks[nodeLabels[i]] = { ->
    timeout(600) {
      node(nodeLabel) {
        stage ("Build artifacts containers on " + nodeLabel + " and push to quay.io") {
          wrap([$class: 'TimestamperBuildWrapper']) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
            def util = load "${WORKSPACE}/util.groovy"
            cleanWs()
            sh "docker system prune -af || true"
            platforms.add(sh(script: '''uname -m''', returnStdout:true).trim())
            util.cloneRepoWithBootstrap("https://github.com/redhat-developer/codeready-workspaces-theia.git", "${WORKSPACE}/crw-theia", MIDSTM_BRANCH, false)
            withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB'),
                string(credentialsId: 'quay.io-crw-crwci_user_token', variable: 'QUAY_TOKEN')]) {
              util.installNPM(nodeVersion, yarnVersion)
              CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
              println "CRW_VERSION = '" + CRW_VERSION + "'"
              util.installSkopeoFromContainer("")
              util.installYq()
              def buildLog = ""

              // updateBaseImages.sh -b crw-2-rhel-8 -w conf -f \*from.dockerfile -maxdepth 3
              util.updateBaseImages("${WORKSPACE}/crw-theia", MIDSTM_BRANCH, "-w conf -f \\*from.dockerfile -maxdepth 3")

              // parse THEIA_COMMIT_SHA from BUILD_PARAMS file
              THEIA_COMMIT_SHA = sh(script: '''#!/bin/bash
cd crw-theia && var=THEIA_COMMIT_SHA; sed -n "/${var}=/ s/${var}=//p" BUILD_PARAMS
''', returnStdout: true).trim()
              echo "[INFO] Using Eclipse Theia commit SHA THEIA_COMMIT_SHA = ${THEIA_COMMIT_SHA} from ${SOURCE_BRANCH} branch"

              def buildStatusCode = 0
              ansiColor('xterm') {
                def statusCode = util.loginToRegistries()
                if (statusCode > 0) {
                  currentBuild.result = 'FAILURE'
                } else {
                  echo "[INFO] Build images: " + CONTAINERS
                  // retry(2) {
                  buildStatusCode = sh script:'''#!/bin/bash -xe
export GITHUB_TOKEN="''' + GITHUB_TOKEN + '''"
mkdir -p ${WORKSPACE}/logs/
pushd ${WORKSPACE}/crw-theia >/dev/null
    node --version
    $(cat BUILD_COMMAND) 2>&1 | tee ${WORKSPACE}/logs/crw-theia_buildlog.txt
popd >/dev/null
''', returnStatus: true
                // }

                  buildLog = readFile("${WORKSPACE}/logs/crw-theia_buildlog.txt").trim()
                  if (buildStatusCode != 0 || buildLog.find(/returned a non-zero code:/)?.trim())
                  {
                    ansiColor('xterm') {
                      echo ""
                      echo "=============================================================================================="
                      echo ""
                      error "[ERROR] Build has failed with exit code " + buildStatusCode + "\n\n" + buildLog
                    }
                    currentBuild.result = 'FAILED'
                  }

                  def descriptString="Build #${BUILD_NUMBER} (" + (new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss")).format(new Date()) + ") <br/> :: crw-theia @ ${MIDSTM_BRANCH}, che-theia @ ${SOURCE_BRANCH}, theia @ ${THEIA_COMMIT_SHA} (${THEIA_BRANCH})"
                  echo "${descriptString}"
                  currentBuild.description="${descriptString}"
                  echo "currentBuild.result = " + currentBuild.result

                  buildLog = readFile("${WORKSPACE}/logs/crw-theia_buildlog.txt").trim()
                  if (buildStatusCode != 0 || buildLog.find(/Command failed|exit code/)?.trim())
                  {
                      error "[ERROR] Build has failed with exit code " + buildStatusCode + "\n\n" + buildLog
                      currentBuild.result = 'FAILED'
                      util.notifyBuildFailed()
                  }
                  echo "currentBuild.result = " + currentBuild.result
                }
              } // ansiColor
            } // with credentials
          } // wrap
        } // stage
      } // node
    } // timeout
  } // tasks
} // for

stage("Builds") {
    parallel(tasks)

    // verify requested platforms attempted asset build
    if (req_platforms.sort() != platforms.sort()) {
      error "[ERROR] Build failed as " + platforms + " didn't contain all platforms requested (" + req_platforms + ")"
      currentBuild.result = 'FAILED'
      util.notifyBuildFailed()
    }
}

nodeLabel = "${nodeLabels[0]}"
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    echo "currentBuild.result = " + currentBuild.result
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)

      wrap([$class: 'TimestamperBuildWrapper']) {
        // sync crw-theia to crw-images
        util.cloneRepoWithBootstrap("https://github.com/redhat-developer/codeready-workspaces-theia.git", "${WORKSPACE}/crw-theia", MIDSTM_BRANCH, true)
        util.cloneRepoWithBootstrap("https://github.com/redhat-developer/codeready-workspaces-images.git", "${WORKSPACE}/crw-images", MIDSTM_BRANCH, false)
        def statusCode = util.loginToRegistries()
        if (statusCode > 0) {
            currentBuild.result = 'FAILURE'
        } else {
          withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
              file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
            sh """
  pushd crw-theia >/dev/null
    ./build/scripts/sync.sh -s ${WORKSPACE}/crw-theia -t ${WORKSPACE}/crw-images --commit
  popd >/dev/null
  """
          }

          JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
          build(
              job: 'sync-to-downstream_' + JOB_BRANCH,
              wait: true,
              propagate: true,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "theia+respins+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'REPOS',
                  value: CONTAINERS
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: JOB_BRANCH
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'UPDATE_BASE_IMAGES_FLAGS',
                  value: util.globalVar({UPDATE_BASE_IMAGES_FLAGS})
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'MIDSTM_BRANCH',
                  value: MIDSTM_BRANCH
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: FORCE_BUILD
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
            )
            currentBuild.description+="; Downstream sync job triggered"
        }
      } // wrap
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
