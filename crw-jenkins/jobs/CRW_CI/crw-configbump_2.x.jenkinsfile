#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
//   MIDSTM_BRANCH
//   FORCE_BUILD

def SOURCE_REPO = "che-incubator/configbump" // upstream source repo from which to find commits
def DWNSTM_REPO = "redhat-developer/codeready-workspaces-images" // repo to use as target
def SYNC_REPO="configbump"

def OLD_SHA=""
def SOURCE_SHA=""
def NEW_SHA=""

// Nodes to run artifact build on ex. ['rhel83', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabels = ['rhel83', 's390x-rhel8', 'ppc64le-rhel8']
def Map tasks = [failFast: false]

timeout(120) {
    def String nodeLabel = "${nodeLabels[0]}"
    node(nodeLabel) {
        stage ("Sync repos on " + nodeLabel) {
            wrap([$class: 'TimestamperBuildWrapper']) {
                withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                    file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
                    println "CRW_VERSION = '" + CRW_VERSION + "'"

                    println "########################################################################################################"
                    println "##  Clone and update github.com/${SOURCE_REPO}.git"
                    println "########################################################################################################"
                    SOURCE_DIR="${WORKSPACE}/sources"
                    util.cloneRepoWithBootstrap("https://github.com/${SOURCE_REPO}.git", SOURCE_DIR, SOURCE_BRANCH, true)
                    SOURCE_SHA = util.getLastCommitSHA(SOURCE_DIR)
                    println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

                    println "########################################################################################################"
                    println "##  Sync ${SYNC_REPO} to codeready-workspaces-images"
                    println "########################################################################################################"
                    util.cloneRepoWithBootstrap("https://github.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn/", MIDSTM_BRANCH, false)
                    TARGET_DIR="${WORKSPACE}/targetdwn/" + util.getCRWLongName(SYNC_REPO)
                    OLD_SHA = util.getLastCommitSHA(TARGET_DIR)
                    println "Got OLD_SHA in targetdwn/${SYNC_REPO} folder: " + OLD_SHA
                    //rsync files
                    sh('''#!/bin/bash -xe
                    cd ''' + TARGET_DIR + '''
                    chmod +x build/scripts/sync.sh
                    ./build/scripts/sync.sh -v ''' + CRW_VERSION + ''' -s ''' + SOURCE_DIR + ''' -t ''' + TARGET_DIR
                    )

                    util.updateBaseImages(TARGET_DIR, MIDSTM_BRANCH, "-q --no-commit")

                    // push to dist-git
                    sh('''#!/bin/bash -xe
                      export KRB5CCNAME=/var/tmp/crw-build_ccache
                      cd ${WORKSPACE}/targetdwn
                      git add ''' + util.getCRWLongName(SYNC_REPO) + '''
                      git update-index --refresh || true  # ignore timestamp updates
                      if [[ \$(git diff-index HEAD --) ]]; then # file changed
                        cd ''' + TARGET_DIR + '''
                        git add . -A -f
                        git commit -s -m "ci: [sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
                        git push origin ''' + MIDSTM_BRANCH + ''' || true
                      fi
                    ''')
                    NEW_SHA = util.getLastCommitSHA(TARGET_DIR)
                    println "Got NEW_SHA in targetdwn/${SYNC_REPO} folder: " + NEW_SHA
                    currentBuild.description="Upstream sync done"
                } // withCredentials
            } // wrap
        } // stage
    } // node
} // timeout

for (int i=0; i < nodeLabels.size(); i++) {
  def String nodeLabel = "${nodeLabels[i]}"
  print "[" + (i+1) + "/" + nodeLabels.size() + "] Create task to run on ${nodeLabel}"
  tasks[nodeLabels[i]] = { ->
    timeout(120) {
        node(nodeLabel){
            stage("Build artifacts on " + nodeLabel) {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    util.installHub("2.14.2", GOLANG_VERSION) // for publishing asset files to GH releases
                    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                        usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
                        file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                        // build project in Jenkins so we can collect asset-* files later via get-sources-jenkins.sh, then trigger a build brew with those files
                        if (NEW_SHA != OLD_SHA || FORCE_BUILD == "true") {
                            util.cloneRepoWithBootstrap("https://github.com/${DWNSTM_REPO}", "${WORKSPACE}/codeready-workspaces-images", MIDSTM_BRANCH, false)
                            util.loginToRegistries()
                            CSV_VERSION = util.getCSVVersion(MIDSTM_BRANCH)
                            TARGET_DIR = "${WORKSPACE}/codeready-workspaces-images/" + util.getCRWLongName(SYNC_REPO)
                            sh('''#!/bin/bash -x
                            cd ''' + TARGET_DIR+ '''
                            chmod +x build/rhel.binary.build.sh
                            ./build/rhel.binary.build.sh -v ''' + CSV_VERSION + ''' -b ''' + MIDSTM_BRANCH + '''
                            ''')
                            currentBuild.description+="; New ${nodeLabel} artifacts built"
                        } else {
                            println "No changes upstream, nothing to build in Jenkins!"
                            currentBuild.description+="; No new ${nodeLabel} artifacts"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } // withCredentials
                } // wrap
            } // stage
        } // node
    } // timeout
  } // tasks
} // for

stage("Builds") {
  println "########################################################################################################"
  println "##  Build ${SYNC_REPO} assets"
  println "########################################################################################################"
  parallel(tasks)
}

// kick off get-sources-rhpkg-container-build_2.y job
nodeLabel = "${nodeLabels[0]}"
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} containers"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (NEW_SHA != OLD_SHA || FORCE_BUILD == "true") {
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
        build(
              job: 'sync-to-downstream_' + JOB_BRANCH,
              // if get-sources fetches from this job's artifacts, cannot set wait: true or we won't fetch the latest artifacts (build will still be running)
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: SYNC_REPO + "+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'REPOS',
                  value: util.getCRWLongName(SYNC_REPO)
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: JOB_BRANCH
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'MIDSTM_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: FORCE_BUILD
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
        )
        currentBuild.description+="; Downstream sync job triggered"
      } else {
        println "No changes upstream, nothing to sync / build in brew!"
        currentBuild.description+="; No sync or Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
