#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// MIDSTM_BRANCH
// JOB_BRANCH
// CSV_VERSION
// CSV_VERSION_PREV
// FORCE_BUILD = "false"

@Field String SOURCE_BRANCH = "7.24.x" // branch of source repo from which to find and sync commits to pkgs.devel repo

def SOURCE_REPO = "eclipse/che-operator" //source repo from which to find and sync commits to pkgs.devel repo
def MIDSTM_REPO = "redhat-developer/codeready-workspaces-operator" //source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-operator-metadata" // dist-git repo to use as target
def SCRATCH = "false"
def SYNC_REPO = "operator-metadata" // also used for the Brew dockerfile params

def SOURCE_SHA=""
def OLD_SHA_MID=""
def OLD_SHA_DWN=""
def NEW_SHA_MID=""
def NEW_SHA_DWN=""

def String nodeLabel = 'rhel8'
timeout(120) {
  node(nodeLabel) {
    stage ("Sync repos on ${nodeLabel}") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
          sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
          def util = load "${WORKSPACE}/util.groovy"
          cleanWs()
          util.installSkopeoFromContainer("")
          util.installYq()
          println "CSV_VERSION = '" + CSV_VERSION + "'"
          // need to call this to set CRW_BRANCH_F for util.updateBaseImages
          CRW_VERSION = JOB_BRANCH
          println "CRW_VERSION = '" + CRW_VERSION + "'"
          QUAY_REPO_PATH=util.getCRWShortName(SYNC_REPO) + "-rhel8"
          util.bootstrap(CRW_KEYTAB)

          util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
          util.cloneRepo("https://github.com/${MIDSTM_REPO}.git", "${WORKSPACE}/targetmid", MIDSTM_BRANCH)
          util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH)

          // UP2MID are right now ONLY files in olm/ folder upstream copied to build/scripts/ folder midstream
          def SYNC_FILES_UP2MID = "digestExcludeList images.sh olm.sh" 

          SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")
          println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

          OLD_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/targetmid")
          println "Got OLD_SHA_MID in targetmid folder: " + OLD_SHA_MID

          OLD_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
          println "Got OLD_SHA_DWN in targetdwn folder: " + OLD_SHA_DWN

          def SOURCEDOCKERFILE="${WORKSPACE}/targetmid/operator-metadata.Dockerfile"
          sh '''
# rsync files in upstream github to dist-git
for d in ''' + SYNC_FILES_UP2MID + '''; do
  if [[ -f ${WORKSPACE}/sources/olm/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/sources/olm/${d} ${WORKSPACE}/targetmid/build/scripts/${d}
  elif [[ -d ${WORKSPACE}/sources/olm/${d} ]]; then
    # copy over the files
    rsync -zrlt ${WORKSPACE}/sources/olm/${d}/* ${WORKSPACE}/targetmid/build/scripts/${d}/
    # sync the directory and delete from targetmid if deleted from source
    rsync -zrlt --delete ${WORKSPACE}/sources/olm/${d}/ ${WORKSPACE}/targetmid/build/scripts/${d}/
  fi
done

CSV_NAME="codeready-workspaces"
CSV_FILE="\$( { find ${WORKSPACE}/targetdwn/manifests/ -name "${CSV_NAME}.csv.yaml" | tail -1; } || true)"; 
echo "[INFO] CSV_FILE = ${CSV_FILE}"
# if [[ ! ${CSV_FILE} ]]; then 
  # CRW-878 generate CSV and update CRD from upstream
  cd ${WORKSPACE}/targetmid/build/scripts
  ./sync-che-olm-to-crw-olm.sh -v ''' + CSV_VERSION + ''' -p ''' + CSV_VERSION_PREV + ''' \
    -s ${WORKSPACE}/sources -t ${WORKSPACE}/targetmid --crw-branch ''' + MIDSTM_BRANCH

          util.updateBaseImages("${WORKSPACE}/targetmid", MIDSTM_BRANCH, 
            "-f " + SOURCEDOCKERFILE.replaceAll(/^.+\//,"") + " -maxdepth 1 --nocommit")

          sh '''
  cd ${WORKSPACE}/targetmid/
  # if anything has changed other than the createdAt date, then we commit this
  if [[ $(git diff | grep -v createdAt | egrep "^(-|\\+) ") ]]; then
    git add . -A -f
    git commit -s -m "[csv] Add CSV ''' + CSV_VERSION + '''" .
    git push origin ''' + MIDSTM_BRANCH + '''
  else # no need to push this so revert
    echo "[INFO] No significant changes (other than createdAt date) so revert and do not commit"
    git checkout manifests/ build/scripts/
  fi
# fi
'''
          NEW_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/targetmid")
          println "Got NEW_SHA_MID in targetmid folder: " + NEW_SHA_MID

          def SYNC_FILES_MID2DWN = "manifests metadata build" // folders in mid/dwn

          sh '''
# rsync files in github midstream to dist-git downstream
for d in ''' + SYNC_FILES_MID2DWN + '''; do
  if [[ -f ${WORKSPACE}/targetmid/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/targetmid/${d} ${WORKSPACE}/targetdwn/${d}
  elif [[ -d ${WORKSPACE}/targetmid/${d} ]]; then
    # copy over the files
    rsync -zrlt ${WORKSPACE}/targetmid/${d}/* ${WORKSPACE}/targetdwn/${d}/
    # sync the directory and delete from targetdwn if deleted from targetmid
    rsync -zrlt --delete ${WORKSPACE}/targetmid/${d}/ ${WORKSPACE}/targetdwn/${d}/
  fi
done

cp -f ''' + SOURCEDOCKERFILE + ''' ${WORKSPACE}/targetdwn/Dockerfile

CRW_VERSION="''' + CRW_VERSION + '''"
#apply patches
sed -i ${WORKSPACE}/targetdwn/Dockerfile \
  -e "s#FROM registry.redhat.io/#FROM #g" \
  -e "s#FROM registry.access.redhat.com/#FROM #g" \
  -e "s/# *RUN yum /RUN yum /g" \

# generate digests from tags
# 1. convert csv to use brew container refs so we can resolve stuff
CSV_NAME="codeready-workspaces"
CSV_FILE="\$(find ${WORKSPACE}/targetdwn/manifests/ -name "${CSV_NAME}.csv.yaml" | tail -1)"; # echo "[INFO] CSV = ${CSV_FILE}"
sed -r \
    `# for plugin & devfile registries, use internal Brew versions` \
    -e "s|registry.redhat.io/codeready-workspaces/(pluginregistry-rhel8:.+)|registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-\\1|g" \
    -e "s|registry.redhat.io/codeready-workspaces/(devfileregistry-rhel8:.+)|registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-\\1|g" \
    -i "${CSV_FILE}"

# 2. generation of digests already done as part of sync-che-olm-to-crw-olm.sh above

# NOTE about openshift.versions field below: "v4.5,v4.6" is special. Do not change it. 
# See details in https://docs.engineering.redhat.com/display/CFC/Delivery

# 3. revert to OSBS image refs, since digest pinning will automatically switch them to RHCC values
sed -r \
    -e "s#(quay.io/crw/|registry.redhat.io/codeready-workspaces/)#registry-proxy.engineering.redhat.com/rh-osbs/codeready-workspaces-#g" \
    -i "${CSV_FILE}"
METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''" \r
LABEL operators.operatorframework.io.bundle.mediatype.v1=registry+v1 \\\r
      operators.operatorframework.io.bundle.manifests.v1=manifests/ \\\r
      operators.operatorframework.io.bundle.metadata.v1=metadata/ \\\r
      operators.operatorframework.io.bundle.package.v1=codeready-workspaces \\\r
      operators.operatorframework.io.bundle.channels.v1=latest \\\r
      operators.operatorframework.io.bundle.channel.default.v1=latest \\\r
      com.redhat.delivery.operator.bundle="true" \\\r
      com.redhat.openshift.versions="v4.5,v4.6" \\\r
      com.redhat.delivery.backport=true \\\r
      summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-rhel8-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'$CRW_VERSION'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>, Dmytro Nochevnov <dnochevn@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
'''

          // push changes in github to dist-git
          util.updateBaseImages("${WORKSPACE}/targetdwn", MIDSTM_BRANCH, "--nocommit")
          sh '''#!/bin/bash -xe
export KRB5CCNAME=/var/tmp/crw-build_ccache
cd ${WORKSPACE}/targetdwn
if [[ \$(git diff --name-only) ]]; then # file changed
  git add Dockerfile ''' + SYNC_FILES_MID2DWN + '''
  git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + ''' + ''' + MIDSTM_REPO + ''' @ ''' + NEW_SHA_MID + '''" \
    Dockerfile ''' + SYNC_FILES_MID2DWN + ''' || true
  git push origin ''' + MIDSTM_BRANCH + '''
  echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + ''' + ''' + MIDSTM_REPO + ''' @ ''' + NEW_SHA_MID + '''"
fi
cd ..
'''
          NEW_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
          println "Got NEW_SHA_DWN in targetdwn folder: " + NEW_SHA_DWN

          if (NEW_SHA_MID.equals(OLD_SHA_MID) && NEW_SHA_DWN.equals(OLD_SHA_DWN) && !FORCE_BUILD.equals("true")) {
            currentBuild.result='UNSTABLE'
          }

        } // with
      } // wrap
    } // stage
  } // node
} // timeout

// kick off get-sources-rhpkg-container-build_2.y job
node(nodeLabel){ 
  stage ("Build container on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} container"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA_MID.equals(OLD_SHA_MID) || !NEW_SHA_DWN.equals(OLD_SHA_DWN) || FORCE_BUILD == "true") {
        build(
              job: 'get-sources-rhpkg-container-build_' + CRW_VERSION,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_PATHs',
                  value: "${DWNSTM_REPO}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'QUAY_REPO_PATHs',
                  // SPECIAL CASE FOR operator-metadata (and operator)
                  value: "crw-2-rhel8-" + util.getCRWShortName(SYNC_REPO)
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: "${JOB_BRANCH}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: true
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: SCRATCH
                ]
              ]
        )
        currentBuild.description="Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description="No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node

// kick off crwctl_2.y job
node(nodeLabel){ 
  stage ("Build crwctl on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build crwctl ${JOB_BRANCH}"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA_MID.equals(OLD_SHA_MID) || !NEW_SHA_DWN.equals(OLD_SHA_DWN) || FORCE_BUILD.equals("true")) {
        build(
              job: 'crwctl_' + JOB_BRANCH,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "build+crwctl+for+operator+sync+from+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'versionSuffix',
                  value: "CI"
                ]
              ]
        )
        currentBuild.description+="; crwctl build triggered"
      } else {
        println "No changes upstream, nothing to rebuild in crwctl!"
        currentBuild.description+="; no crwctl build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
