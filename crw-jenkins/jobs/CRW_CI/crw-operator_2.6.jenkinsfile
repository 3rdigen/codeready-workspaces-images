#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// MIDSTM_BRANCH
// JOB_BRANCH
// FORCE_BUILD = "false"

@Field String SOURCE_BRANCH = "7.24.x" // branch of source repo from which to find and sync commits to pkgs.devel repo

def SOURCE_REPO = "eclipse/che-operator" //source repo from which to find and sync commits to pkgs.devel repo
def MIDSTM_REPO = "redhat-developer/codeready-workspaces-operator" // GH repo to use as target for deploy/ folder
def DWNSTM_REPO = "containers/codeready-workspaces-operator" // dist-git repo to use as target for everything
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def SYNC_REPO = "operator"

// CRW-1535 updateBaseImages: restrict found tag to 1.13-zzz (not latest 1.14-zzz for golang), and 8.x- for ubi-minimal
// NOTE: maxdepth 1 here is to prevent attempting to transform empty dockerfile in che-operator/build/Dockerfile
def UPDATE_BASE_IMAGES_FLAGS=" -maxdepth 1 --tag \"1\\\\.13|8\\\\.[0-9]-\" " 

def SOURCE_SHA=""
def OLD_SHA_MID=""
def OLD_SHA_DWN=""
def NEW_SHA_MID=""
def NEW_SHA_DWN=""

def String nodeLabel = 'rhel8'
timeout(120) {
  node(nodeLabel) {
    stage ("Sync repos on ${nodeLabel}") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
          sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
          def util = load "${WORKSPACE}/util.groovy"
          cleanWs()
          // need to call this to set CRW_BRANCH_F for util.updateBaseImages
          CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
          println "CRW_VERSION = '" + CRW_VERSION + "'"

          // not sure why we need this but seems to help w/ rhel8 nodes
          sh ('''sudo yum-config-manager --disable epel-modular || true''')

          util.installSkopeoFromContainer("")
          util.installYq()
          QUAY_REPO_PATH=util.getCRWShortName(SYNC_REPO) + "-rhel8"
          util.bootstrap(CRW_KEYTAB)

          util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
          util.cloneRepo("https://github.com/${MIDSTM_REPO}.git", "${WORKSPACE}/targetmid", MIDSTM_BRANCH)
          util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH)
  
          def SYNC_FILES_UP2DWN = ".dockerignore .gitignore cmd deploy deploy.sh e2e go.mod go.sum LICENSE olm pkg README.md templates vendor version"
          def SYNC_FILES_MID2DWN = "build"
          def SYNC_FILES_DWN2MID = "deploy"

          SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")
          println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

          OLD_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/targetmid")
          println "Got OLD_SHA_MID in targetmid folder: " + OLD_SHA_MID

          OLD_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
          println "Got OLD_SHA_DWN in targetdwn folder: " + OLD_SHA_DWN

          util.updateBaseImages("${WORKSPACE}/sources", SOURCE_BRANCH, UPDATE_BASE_IMAGES_FLAGS)
          sh '''#!/bin/bash -xe
# rsync files in upstream github to dist-git
for d in ''' + SYNC_FILES_UP2DWN + '''; do
  if [[ -f ${WORKSPACE}/sources/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/sources/${d} ${WORKSPACE}/targetdwn/${d}
  elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
    # copy over the files
    rsync -zrlt ${WORKSPACE}/sources/${d}/* ${WORKSPACE}/targetdwn/${d}/
    # sync the directory and delete from targetdwn if deleted from source
    rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ${WORKSPACE}/targetdwn/${d}/
  fi
done

# rsync files in midstream github to dist-git
for d in ''' + SYNC_FILES_MID2DWN + '''; do
  if [[ -f ${WORKSPACE}/targetmid/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/targetmid/${d} ${WORKSPACE}/targetdwn/${d}
  elif [[ -d ${WORKSPACE}/targetmid/${d} ]]; then
    # copy over the files
    rsync -zrlt ${WORKSPACE}/targetmid/${d}/* ${WORKSPACE}/targetdwn/${d}/
    # sync the directory and delete from targetdwn if deleted from source
    rsync -zrlt --delete ${WORKSPACE}/targetmid/${d}/ ${WORKSPACE}/targetdwn/${d}/
  fi
done

CSV_VERSION="$(curl -sSLo - https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/''' + MIDSTM_BRANCH + '''/pom.xml | grep "<version>" | head -2 | tail -1 | \
  sed -r -e "s#.*<version>(.+)</version>.*#\\1#" -e "s#\\.GA##")" # 2.y.0 but not 2.y.0.GA
${WORKSPACE}/targetdwn/build/scripts/sync-che-operator-to-crw-operator.sh -v ${CSV_VERSION} -s ${WORKSPACE}/sources/ -t ${WORKSPACE}/targetmid/
${WORKSPACE}/targetdwn/build/scripts/sync-che-operator-to-crw-operator.sh -v ${CSV_VERSION} -s ${WORKSPACE}/sources/ -t ${WORKSPACE}/targetdwn/
'''

          // get latest tags for the operator deployed images
          def opyaml = "${WORKSPACE}/targetdwn/deploy/operator.yaml"
          def images = [
            /* IF IMAGES DON'T YET EXIST, fall back to quay.io/crw versions */
            "registry.redhat.io/codeready-workspaces/server-rhel8",
            "registry.redhat.io/codeready-workspaces/pluginregistry-rhel8",
            "registry.redhat.io/codeready-workspaces/devfileregistry-rhel8",
            "registry.redhat.io/ubi8/ubi-minimal",
            "registry.redhat.io/rhel8/postgresql-96",
            "registry.redhat.io/rh-sso-7/sso74-openshift-rhel8",
            "registry.redhat.io/codeready-workspaces/pluginbroker-metadata-rhel8",
            "registry.redhat.io/codeready-workspaces/pluginbroker-artifacts-rhel8",
            "registry.redhat.io/codeready-workspaces/jwtproxy-rhel8"
            ]
          result = readFile(opyaml)
          images.each() {
            latestTag = sh(returnStdout:true,script:'''
skopeo inspect docker://''' + it + ''' | jq -r .RepoTags[] | sort -V | \
grep -E -v 'source|latest|RC' | grep "''' + JOB_BRANCH + '''-" | tail -1 || true
            ''').trim()
            if (latestTag?.trim()) {
              echo "[INFO] Got image+tag: $it : $latestTag"
              result.replaceAll("$it:.+", "$it:" + latestTag)
            } else {
              echo "[WARNING] No such image $it found for tag " + JOB_BRANCH + ": checking quay.io/crw for pre-released image..."
              it2=it.replaceAll("registry.redhat.io/codeready-workspaces/", "quay.io/crw/")
              latestTag = sh(returnStdout:true,script:'''
skopeo inspect docker://''' + it2 + ''' | jq -r .RepoTags[] | sort -V | \
grep -E -v 'source|latest|RC' | grep "''' + JOB_BRANCH + '''-" | tail -1 || true
              ''').trim()
              if (latestTag?.trim()) {
                echo "[INFO] Got image+tag: $it2 : $latestTag; using quay tag with RHEC image name"
                result.replaceAll("$it:.+", "$it:" + latestTag)
              } else {
                echo "[WARNING] No such image $it2 found for tag " + JOB_BRANCH + "; nothing to do!"
              }
            }
          }
          writeFile file: opyaml, text: result
          
          sh '''
hasChanged=0
SOURCEDOCKERFILE=${WORKSPACE}/sources/Dockerfile

# remove unneeded olm files
rm -fr ${WORKSPACE}/targetdwn/olm/eclipse-che-preview-openshift ${WORKSPACE}/targetdwn/olm/eclipse-che-preview-kubernetes

cp -f ${SOURCEDOCKERFILE} ${WORKSPACE}/targetdwn/Dockerfile

JOB_BRANCH="''' + JOB_BRANCH + '''"

# apply standard patches to convert from midstream public to downstream Brew build
sed -i ${WORKSPACE}/targetdwn/Dockerfile \
  -e "s#FROM registry.redhat.io/#FROM #g" \
  -e "s#FROM registry.access.redhat.com/#FROM #g" \
  -e "s/# *RUN yum /RUN yum /g"

METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-rhel8-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'$JOB_BRANCH'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      com.redhat.delivery.appregistry="false" \\\r
      usage="" \r'

echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
          '''

          // don't commit yet, we'll do it later
          util.updateBaseImages("${WORKSPACE}/targetmid", MIDSTM_BRANCH, "--nocommit " + UPDATE_BASE_IMAGES_FLAGS)
          if ((sh(script: '''cd ${WORKSPACE}/targetmid; git diff --name-only''', returnStdout: true))?.trim()) {
            sh '''#!/bin/bash -xe
# push changes to github from dist-git
cd ${WORKSPACE}/targetmid
if [[ \$(git diff --name-only) ]]; then # file changed
  git add ''' + SYNC_FILES_DWN2MID + '''
  git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" ''' + SYNC_FILES_DWN2MID + ''' || true
  git push origin ''' + MIDSTM_BRANCH + ''' || true
  echo "[sync] Updated GH @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
fi
'''
          }
          NEW_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/targetmid")
          println "Got NEW_SHA_MID in targetmid folder: " + NEW_SHA_MID

          // don't commit yet, we'll do it later
          util.updateBaseImages("${WORKSPACE}/targetdwn", MIDSTM_BRANCH, "--nocommit " + UPDATE_BASE_IMAGES_FLAGS)
          // if anything changed in targetdwn, push changes in gh to dist-git
          if ((sh(script: '''cd ${WORKSPACE}/targetdwn; git diff --name-only''', returnStdout: true))?.trim()) {
            sh '''#!/bin/bash -xe
cd ${WORKSPACE}/targetdwn
git add . -A -f
git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + ''' + ''' + MIDSTM_REPO + ''' @ ''' + NEW_SHA_MID + '''" . || true
git push origin ''' + MIDSTM_BRANCH + ''' || true
echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + ''' + ''' + MIDSTM_REPO + ''' @ ''' + NEW_SHA_MID + '''"

# now rsync files to MIDSTM GH repo from changes in dist-git
for d in ''' + SYNC_FILES_DWN2MID + '''; do
  if [[ -f ${WORKSPACE}/targetdwn/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/targetdwn/${d} ${WORKSPACE}/targetmid/${d}
  elif [[ -d ${WORKSPACE}/targetdwn/${d} ]]; then
    # copy over the files
    rsync -zrlt ${WORKSPACE}/targetdwn/${d}/* ${WORKSPACE}/targetmid/${d}/
    # sync the directory and delete from targetmid if deleted from source
    rsync -zrlt --delete ${WORKSPACE}/targetdwn/${d}/ ${WORKSPACE}/targetmid/${d}/
  fi
done
'''
          }

          NEW_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
          println "Got NEW_SHA_DWN in targetdwn folder: " + NEW_SHA_DWN

          if (NEW_SHA_MID.equals(OLD_SHA_MID) && NEW_SHA_DWN.equals(OLD_SHA_DWN) && !FORCE_BUILD.equals("true")) {
            println "No changes upstream, nothing to commit"
            currentBuild.result='UNSTABLE'
          }
        } // with
      } // wrap
    } // stage
  } // node
} // timeout

// kick off get-sources-rhpkg-container-build job
node(nodeLabel){ 
  stage ("Build container on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} container"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA_MID.equals(OLD_SHA_MID) || !NEW_SHA_DWN.equals(OLD_SHA_DWN) || FORCE_BUILD.equals("true")) {
        build(
              job: 'get-sources-rhpkg-container-build',
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_PATHs',
                  value: "${DWNSTM_REPO}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'QUAY_REPO_PATHs',
                  // SPECIAL CASE FOR operator (and operator-metadata)
                  value: "crw-2-rhel8-" + util.getCRWShortName(SYNC_REPO)
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: "${JOB_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'UPDATE_BASE_IMAGES_FLAGS',
                  value: UPDATE_BASE_IMAGES_FLAGS
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: true
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: SCRATCH
                ]
              ]
        )
        currentBuild.description="Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description="No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
   } else {
      util.notifyBuildFailed()
   } // if
  } // stage
} //node

// kick off crwctl_2.y job
node(nodeLabel){ 
  stage ("Build crwctl on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build crwctl ${JOB_BRANCH}"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA_MID.equals(OLD_SHA_MID) || !NEW_SHA_DWN.equals(OLD_SHA_DWN) || FORCE_BUILD.equals("true")) {
        build(
              job: 'crwctl_' + JOB_BRANCH,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "build+crwctl+for+operator+sync+from+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'versionSuffix',
                  value: "CI"
                ]
              ]
        )
        currentBuild.description+="; crwctl build triggered"
      } else {
        println "No changes upstream, nothing to rebuild in crwctl!"
        currentBuild.description+="; no crwctl build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
