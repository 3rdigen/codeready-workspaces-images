#!/usr/bin/env groovy
import groovy.transform.Field
import groovy.json.JsonSlurper

// PARAMETERS for this pipeline:
// MIDSTM_BRANCH
// GIT_PATHs
// QUAY_REPO_PATHs
// UPDATE_BASE_IMAGES_FLAGS
// FLOATING_QUAY_TAGS
// SCRATCH
// FORCE_BUILD
// CLEAN_ON_FAILURE = "true"

@Field String NEW_TAG = ""
// NOTE: if rpm install in docker build problems reoccur, see CRW-1958
// CRW-2656 if a theia build, ONLY use dynamic rhel85 boxes so there's maximum disk space available
def String nodeLabel = GIT_PATHs.contains("theia") ? 'x86_64-rhel8-dyn' : 'x86_64-rhel8||s390x-rhel8||ppc64le-rhel8'
currentBuild.description="Building " + QUAY_REPO_PATHs + "... "
timeout(240) {
  node(nodeLabel) { 
    stage ("Build on ${nodeLabel}") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        currentBuild.description=QUAY_REPO_PATHs.replaceAll("crw-2-rhel8-","").replaceAll("-rhel8","").trim() + "... "
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
            def util = load "${WORKSPACE}/util2.groovy"
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)            
            cleanWs()
            util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${GIT_PATHs}", "${WORKSPACE}/sources", MIDSTM_BRANCH, false)
            currentBuild.description=QUAY_REPO_PATHs.replaceAll("crw-2-rhel8-","").replaceAll("-rhel8","").trim() + " : ${JOB_BRANCH}"
            try {
              util.updateBaseImages("${WORKSPACE}/sources", MIDSTM_BRANCH, util.globalVar({UPDATE_BASE_IMAGES_FLAGS}))

              sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/rhpkg-container-build.sh && chmod +x rhpkg-container-build.sh')
              echo "[INFO] Attempt to run rhpkg-container-build.sh, with up to 2 retries"
              retry(2) {
                sh('''#!/bin/bash -e
. ~/crw_env ''' + CRW_VERSION + '''
echo "Node: $(node --version) ( $(which node) )"
echo "Yarn: $(yarn --version) ( $(which yarn) )"

set -x
./rhpkg-container-build.sh ''' + JOB_BRANCH + ''' -s ${WORKSPACE}/sources | tee ${WORKSPACE}/rhpkg-container-build.txt
                ''')
              }

              // compute BUILD_RESULT from output of rhpkg-container-build.sh, after BUILD_RESULT=
              BUILD_RESULT=sh(returnStdout:true,script:'''sed -n '/BUILD_RESULT=/{:loop;n;p;b loop;}' ${WORKSPACE}/rhpkg-container-build.txt''').trim()
              // compute the new tag (eg., 2.y-zz)
              NEW_TAG=sh(returnStdout:true,script:'''grep 'TAGs=' ${WORKSPACE}/rhpkg-container-build.txt | sed -r -e "s#TAGs=##"''').trim()
              // Task info: https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=33850006
              TASK_URL=sh(returnStdout:true,script:'''grep 'TASK_URL=' ${WORKSPACE}/rhpkg-container-build.txt | sed -r -e "s#TASK_URL=##"''').trim()
              BUILD_DESC=sh(returnStdout:true,script:'''grep 'BUILD_DESC=' ${WORKSPACE}/rhpkg-container-build.txt | sed -r -e "s#BUILD_DESC=##"''').trim()

              if (BUILD_DESC.indexOf("UNKNOWN")>=0) {
                currentBuild.result = "UNSTABLE"
              }
              if (BUILD_RESULT.indexOf("ERROR")>=0 || BUILD_RESULT.indexOf("FAILURE")>=0 || !TASK_URL?.trim()) {
                currentBuild.result = "FAILURE"
              }

              currentBuild.description+=" :: " + BUILD_DESC + " </br/> " + BUILD_RESULT

              // if build has passed, trigger a copy to quay 
              if (!currentBuild.result.equals("ABORTED") && 
                  !currentBuild.result.equals("FAILURE") && 
                  !currentBuild.result.equals("UNSTABLE")) {
                sh ('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+MIDSTM_BRANCH+'/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh')
                CONTAINERS=QUAY_REPO_PATHs.replaceAll("crw-2-rhel8-","").replaceAll("-rhel8","").trim()
                sh(script: '''#!/bin/bash -xe
echo " ########################################### "
echo " Copy latest images in osbs to quay: ''' + CONTAINERS.trim() + '''"
echo " ########################################### "
for c in ''' + CONTAINERS.trim() + '''; do
    d=codeready-workspaces-${c}-rhel8
    # special case for operator; all other images follow the pattern
    if [[ $c == "operator" ]] || [[ $c == "operator-"* ]]; then 
        d=codeready-workspaces-${c}
    fi 
    ./getLatestImageTags.sh -b ''' + MIDSTM_BRANCH + ''' -c ${d} --osbs --pushtoquay="''' + CRW_VERSION + ''' ''' + FLOATING_QUAY_TAGS + '''" &
done
wait
                      ''', returnStatus: true)
                }
            } catch (e) {
              currentBuild.result = "FAILURE"
              util.notifyBuildFailed()
              throw e
          }
        } // with
      } // wrap

      CONTAINERS=QUAY_REPO_PATHs.replaceAll("crw-2-rhel8-","").replaceAll("-rhel8","").trim()
      println "########################################################################################################"
      println "##  Copy latest ${CONTAINERS} in OSBS to Quay"
      println "########################################################################################################"
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
      def util = load "${WORKSPACE}/util2.groovy"
      echo "currentBuild.result = " + currentBuild.result
      if (!currentBuild.result.equals("ABORTED") && 
          !currentBuild.result.equals("FAILURE") && 
          !currentBuild.result.equals("UNSTABLE") && 
          !SCRATCH.equals("true") && SCRATCH!=true && 
          QUAY_REPO_PATHs?.trim() && NEW_TAG?.trim()) {
        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
        build(
          job: 'push-latest-container-to-quay_' + JOB_BRANCH,
          // TODO should these be set to wait and propagate: true?
          wait: false,
          propagate: false,
          quietPeriod: 0,
          parameters: [
            [
              $class: 'StringParameterValue',
              name: 'token',
              value: "CI_BUILD"
            ],
            [
              $class: 'StringParameterValue',
              name: 'cause',
              value: "push+latest+${CONTAINERS}+to+quay"
            ],
            [
              $class: 'StringParameterValue',
              name: 'CONTAINERS',
              value: CONTAINERS
            ],
            [
              $class: 'StringParameterValue',
              name: 'FLOATING_QUAY_TAGS',
              value: FLOATING_QUAY_TAGS
            ],
            [
              $class: 'BooleanParameterValue',
              name: 'CLEAN_ON_FAILURE',
              value: CLEAN_ON_FAILURE
            ]
          ]
        )
        currentBuild.description+="; copied to quay"
      } else {
        println "No changes upstream, nothing to copy to quay!"
        currentBuild.description+="; no quay copy"
        currentBuild.result = 'UNSTABLE'
      } // if
      cleanWs(
          cleanWhenSuccess: true,
          cleanWhenUnstable: true,
          cleanWhenNotBuilt: false,
          cleanWhenFailure: CLEAN_ON_FAILURE,
          cleanWhenAborted: true,
          deleteDirs: true,
          disableDeferredWipeout: true,
          notFailBuild: true
      )
    } // stage
  } //node
} // timeout
