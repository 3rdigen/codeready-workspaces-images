#!/usr/bin/env groovy
import groovy.transform.Field
import groovy.json.JsonSlurper

// PARAMETERS for this pipeline:
@Field String MIDSTM_BRANCH = "crw-2.6-rhel-8"

def notifyFailed() {
    emailext (
        subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
        body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
        recipientProviders: [culprits(), developers(), requestor()]
        // [$class: 'CulpritsRecipientProvider'],[$class: 'DevelopersRecipientProvider']]
    )
}

def String nodeLabel = 'rhel8'
timeout(120) {
    node(nodeLabel) { 
        stage ("Build on ${nodeLabel}") {
            wrap([$class: 'TimestamperBuildWrapper']) {
                sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                def util = load "${WORKSPACE}/util.groovy"
                withCredentials([
                    string(credentialsId: 'quay.io-crw-crwci_user_token', variable: 'QUAY_TOKEN'),
                    file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB'),
                    usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD')
                ]) {
                    cleanWs()
                    // util.installRhpkg()
                    // util.installSkopeoFromContainer("registry.redhat.io/rhel8/skopeo")
                    // util.installYq()
                    // util.bootstrap(CRW_KEYTAB)
                    // util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${GIT_PATHs}", "${WORKSPACE}/sources", GIT_BRANCH)

                    try {
                        sh('''#!/bin/bash -xe
                        # do some stuff here 
                        echo "REPO_PATH=\\"2.6-5 2.6 latest 2.6-5 2.6 latest quay.io/crw/machineexec-rhel8:2.6-5 quay.io/crw/machineexec-rhel8:2.6-5 \\"" > ${WORKSPACE}/repos.txt

                        echo "https://brewweb.engineering.redhat.com/brew/taskinfo?taskID=33900172" > ${WORKSPACE}/task_url.txt
                        ''')
                        TASK_URL = sh(returnStdout:true,script:'''cat ${WORKSPACE}/task_url.txt''').trim()
                        // turn 2.6-5 2.6 latest 2.6-5 2.6 ...
                        // into unique list ["2.6-5","2.6","latest","2.6-5","2.6","..."]
                        BUILD_DESC = sh(returnStdout:true,script:'''cat ${WORKSPACE}/repos.txt''').trim().replaceAll('REPO_PATH="','').replaceAll('"','').replaceAll(" ", '","')
                        def BUILD_DESC_LIST = new JsonSlurper().parseText('["' + BUILD_DESC + '"]').unique()
                        BUILD_DESC=BUILD_DESC_LIST.join(" ").replaceAll("(quay.io/crw/.+-rhel8:[0-9.-]+) ", '<a href="https://$1">$1</a> ')

                        // TODO can this work? Needs jenkins auth permission: .split(" ").collect().unique().join(" ")
                        if (BUILD_DESC.indexOf("ERROR")>=0) {
                          currentBuild.result = "FAILURE"
                        }
                        if (BUILD_DESC.indexOf("UNKNOWN")>=0) {
                          currentBuild.result = "UNSTABLE"
                        }

                        // set build desc with image created eg., "2.5-65 quay.io/crw/pluginregistry-rhel8:2.5-65"
                        def descriptString="<a href='" + TASK_URL + "'>" + (currentBuild.result.equals("FAILURE") ? "Failed in ":"Build ") + TASK_URL.replaceAll(".+taskID=","") + "</a> : " + BUILD_DESC
                        echo "${descriptString}"
                        currentBuild.description="${descriptString}"
                    } catch (e) {
                        currentBuild.result = "FAILURE"
                        notifyFailed()
                        throw e
                    }
                } // with
            } // wrap
        } // stage
    } // node 
} // timeout
