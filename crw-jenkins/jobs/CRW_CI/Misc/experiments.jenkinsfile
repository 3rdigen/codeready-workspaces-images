#!/usr/bin/env groovy
import groovy.transform.Field

// PARAMETERS for this pipeline:
// MIDSTM_BRANCH

def String nodeLabel = 'x86_64-rhel8||s390x-rhel8||ppc64le-rhel8'

currentBuild.description="Experimental build " + BUILD_DISPLAY_NAME

timeout(120) {
    node(nodeLabel) { 
        stage ("Build on ${nodeLabel}") {
            currentBuild.description+="; running on " + NODE_NAME + " (" + NODE_LABELS + ")"
            wrap([$class: 'TimestamperBuildWrapper']) {
                sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
                def util = load "${WORKSPACE}/util2.groovy"
                withCredentials([
                    string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                    string(credentialsId: 'quay.io-crw-crwci_user_token', variable: 'QUAY_TOKEN'),
                    file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB'),
                    usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD')
                ]) {
                    cleanWs()
                    // SOURCE_REPO="redhat-developer/codeready-workspaces"
                    // SOURCE_BRANCH=MIDSTM_BRANCH
                    // util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH, false)
                    // sh('''
                    // cd ${WORKSPACE}/sources
                    // echo "" >> README.adoc
                    // git commit -sm "no-op change" README.adoc
                    // git pull
                    // git remote -v
                    // git push
                    // ''')

//                     util.installSkopeoFromContainer("")
//                     util.installYq()
//                     CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
//                     println "CRW_VERSION = '" + CRW_VERSION + "'"
//                     JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
//                     util.bootstrap(CRW_KEYTAB)

//                     try {
//                         SOURCE_REPO = "eclipse-che/che-operator"
//                         SOURCE_BRANCH = "7.28.x" 
//                         util.cloneRepoWithBootstrap("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH, false)
//                         SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")
//                         println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

//                         UPDATE_BASE_IMAGES_FLAGS=" -maxdepth 1 --tag \"1\\\\.13|8\\\\.[0-9]-\" " // CRW-1535 updateBaseImages: restrict found tag to 1.13-zzz (not latest 1.14-zzz for golang), and 8.x- for ubi-minimal

//                         println "Using UPDATE_BASE_IMAGES_FLAGS = ${UPDATE_BASE_IMAGES_FLAGS} ..."
//                         util.updateBaseImages("${WORKSPACE}/sources", SOURCE_BRANCH, "-v --no-commit " + UPDATE_BASE_IMAGES_FLAGS)

//                         diff=sh(returnStdout:true, script:'''#!/bin/bash -xe
// # do some stuff here 

// cd sources; git diff
// '''
//                         ).trim()
//                         println diff
//                     } catch (e) {
//                         currentBuild.result = "FAILURE"
//                         throw e
//                     }
                } // with
            } // wrap
        } // stage
    } // node 
} // timeout
