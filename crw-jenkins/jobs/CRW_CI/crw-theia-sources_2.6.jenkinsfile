#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
//   MIDSTM_BRANCH
//   SCRATCH = true (don't push to Quay) or false (do push to Quay)

@Field String CHE_THEIA_BRANCH = "7.24.x" // che-theia branch to build

// DO NOT CHANGE THIS until newer version exists in crw-theia ubi base images, or build will fail.
def nodeVersion = "12.19.1"
def yarnVersion = "1.17.3"

// other params not worth setting in Jenkins (they don't change)
def THEIA_BRANCH = "master" // theia branch/tag to build: master (will then compute the correct SHA to use)
def THEIA_GITHUB_REPO = "eclipse-theia/theia" // default: eclipse-theia/theia; optional: redhat-developer/eclipse-theia
def THEIA_COMMIT_SHA = "" // leave blank to compute within build.sh; or look at https://github.com/eclipse/che-theia/blob/7.y.x/build.include#L16 = 4641a298

// Nodes to run artifact build on ex. ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabels = ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def Map tasks = [failFast: false]
timeout(20) {
  def String nodeLabel = "${nodeLabels[0]}"
  node(nodeLabel) {
    stage ("Checkout Che Theia on " + nodeLabel) {
      wrap([$class: 'TimestamperBuildWrapper']) {
        // check out che-theia before we need it in build.sh so we can use it as a poll basis
        // then discard this folder as we need to check them out and massage them for crw
        sh "mkdir -p tmp"
        checkout([$class: 'GitSCM',
          branches: [[name: "${CHE_THEIA_BRANCH}"]],
          doGenerateSubmoduleConfigurations: false,
          poll: true,
          extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: "tmp/che-theia"]
            // ,
            // [$class: 'CloneOption', shallow: true, depth: 1]
          ],
          submoduleCfg: [],
          userRemoteConfigs: [[url: "https://github.com/eclipse/che-theia.git"]]])
        sh "rm -fr tmp"
      }
    }
  }
}

for (int i=0; i < nodeLabels.size(); i++) {
  def String nodeLabel = "${nodeLabels[i]}"
  print "[" + (i+1) + "/" + nodeLabels.size() + "] Create task to run on ${nodeLabel}"
  tasks[nodeLabels[i]] = { ->
    timeout(600) {
      node(nodeLabel) {
        stage ("Build artifacts on " + nodeLabel) {
          wrap([$class: 'TimestamperBuildWrapper']) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
            def util = load "${WORKSPACE}/util.groovy"
            cleanWs()
            sh "docker system prune -af || true"
            withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
              util.cloneRepo("https://github.com/redhat-developer/codeready-workspaces-theia.git", "${WORKSPACE}/crw-theia", MIDSTM_BRANCH)
              util.installNPM(nodeVersion, yarnVersion)
              CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
              println "CRW_VERSION = '" + CRW_VERSION + "'"
              util.installSkopeoFromContainer("")
              def buildLog = ""
              new File("${WORKSPACE}/crw-theia/conf/").traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.+from.+dockerfile/) { it ->
                println "Update base images in " + it + "..."
                util.updateBaseImages("${WORKSPACE}/crw-theia", MIDSTM_BRANCH, 
                  "-w " + it.toString().replaceAll(/\/[^\/]+$/,"") + " -f " + it.toString().replaceAll(/^.+\//,"") + " -q")
              }

              def BUILD_PARAMS="--nv ${nodeVersion} --cv ${CRW_VERSION} --ctb ${CHE_THEIA_BRANCH} --tb ${THEIA_BRANCH} --tgr ${THEIA_GITHUB_REPO} -d -t -b --no-cache --rmi:all --no-async-tests"
              if (!THEIA_COMMIT_SHA.equals("")) {
                BUILD_PARAMS=BUILD_PARAMS+" --tcs ${THEIA_COMMIT_SHA}";
              } else {
                THEIA_COMMIT_SHA = sh(script: '''#!/bin/bash -xe
      pushd /tmp >/dev/null || true
      curl -sSLO https://raw.githubusercontent.com/eclipse/che-theia/''' + CHE_THEIA_BRANCH + '''/build.include
      export $(cat build.include | egrep "^THEIA_COMMIT_SHA") && THEIA_COMMIT_SHA=${THEIA_COMMIT_SHA//\\"/}
      popd >/dev/null || true
      echo -n $THEIA_COMMIT_SHA
      ''', returnStdout: true)
                echo "[INFO] Using Eclipse Theia commit SHA THEIA_COMMIT_SHA = ${THEIA_COMMIT_SHA} from ${CHE_THEIA_BRANCH} branch"
              }

              def buildStatusCode = 0
              ansiColor('xterm') {
                  buildStatusCode = sh script:'''#!/bin/bash -xe
    export GITHUB_TOKEN="''' + GITHUB_TOKEN + '''"
    mkdir -p ${WORKSPACE}/logs/
    pushd ${WORKSPACE}/crw-theia >/dev/null
        node --version
        ./build.sh ''' + BUILD_PARAMS + ''' 2>&1 | tee ${WORKSPACE}/logs/crw-theia_buildlog.txt
    popd >/dev/null
    ''', returnStatus: true

                buildLog = readFile("${WORKSPACE}/logs/crw-theia_buildlog.txt").trim()
                if (buildStatusCode != 0 || buildLog.find(/returned a non-zero code:/)?.trim())
                {
                  ansiColor('xterm') {
                    echo ""
                    echo "=============================================================================================="
                    echo ""
                    error "[ERROR] Build has failed with exit code " + buildStatusCode + "\n\n" + buildLog
                  }
                  currentBuild.result = 'FAILED'
                }

                archiveArtifacts fingerprint: true, onlyIfSuccessful: true, allowEmptyArchive: false, artifacts: "crw-theia/dockerfiles/**, logs/*"

                // TODO start collecting shas with "git rev-parse --short=4 HEAD"
                def descriptString="Build #${BUILD_NUMBER} (" + (new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss")).format(new Date()) + ") <br/> :: crw-theia @ ${MIDSTM_BRANCH}, che-theia @ ${CHE_THEIA_BRANCH}, theia @ ${THEIA_COMMIT_SHA} (${THEIA_BRANCH})"
                echo "${descriptString}"
                currentBuild.description="${descriptString}"
                echo "currentBuild.result = " + currentBuild.result

                buildLog = readFile("${WORKSPACE}/logs/crw-theia_buildlog.txt").trim()
                if (buildStatusCode != 0 || buildLog.find(/Command failed|exit code/)?.trim())
                {
                    error "[ERROR] Build has failed with exit code " + buildStatusCode + "\n\n" + buildLog
                    currentBuild.result = 'FAILED'
                    util.notifyBuildFailed()

                }
                echo "currentBuild.result = " + currentBuild.result
              } // ansiColor
            } // with credentials
          } // wrap
        } // stage
      } // node
    } // timeout
  } // tasks
} // for

stage("Builds") {
    parallel(tasks)
}

nodeLabel = "${nodeLabels[0]}"
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    echo "currentBuild.result = " + currentBuild.result
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"

      build(
            job: 'crw-theia-containers_' + CRW_VERSION,
            wait: false,
            propagate: false,
            parameters: [
              [
                $class: 'BooleanParameterValue',
                name: 'SCRATCH',
                value: SCRATCH,
              ]
            ]
          )
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
