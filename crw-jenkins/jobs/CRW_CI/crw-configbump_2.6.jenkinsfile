#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
//   MIDSTM_BRANCH
//   FORCE_BUILD

def SOURCE_REPO = "che-incubator/configbump" // upstream source repo from which to find commits
def DWNSTM_REPO = "containers/codeready-workspaces-configbump" // repo to use as target
def SYNC_REPO="configbump"

String SOURCE_BRANCH = "master" // or a tag like "v0.1.4"

def OLD_SHA=""
def SOURCE_SHA=""
def NEW_SHA=""

// Nodes to run artifact build on ex. ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabels = ['rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def Map tasks = [failFast: false]

timeout(30) {
    def String nodeLabel = "${nodeLabels[0]}"
    node(nodeLabel) {
        stage ("Sync repos on " + nodeLabel) {
            wrap([$class: 'TimestamperBuildWrapper']) {
                withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                    file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    cleanWs()
                    util.installSkopeoFromContainer("")
                    util.installYq()

                    CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
                    println "CRW_VERSION = '" + CRW_VERSION + "'"
                    util.bootstrap(CRW_KEYTAB)

                    println "########################################################################################################"
                    println "##  Clone and update github.com/${SOURCE_REPO}.git"
                    println "########################################################################################################"
                    util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources/${SYNC_REPO}", SOURCE_BRANCH)
                    SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources/${SYNC_REPO}")
                    println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

                    println "########################################################################################################"
                    println "##  Sync ${SYNC_REPO} to pkgs.devel"
                    println "########################################################################################################"
                    util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn/${SYNC_REPO}", MIDSTM_BRANCH)
                    OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn/${SYNC_REPO}")
                    println "Got OLD_SHA in targetdwn/${SYNC_REPO} folder: " + OLD_SHA

                    writeFile file: "rsync-upstream-exclude", text: '''.github
.gitattributes'''
                    // ignore files that are ONLY in downstream (not midstream or upstream)
                    writeFile file: "rsync-brew-exclude", text: '''sources
get-sources-jenkins.sh
cvp.yml
tests/
content_sets.yml
content_sets.repo
container.yaml
.gitignore'''
                    sh('''
                      rsync -avhz --checksum --exclude-from ${WORKSPACE}/rsync-upstream-exclude --exclude-from ${WORKSPACE}/rsync-brew-exclude --exclude .git/ --exclude .github/ --exclude .gitignore \
                        ${WORKSPACE}/sources/''' + SYNC_REPO + '''/ ${WORKSPACE}/targetdwn/''' + SYNC_REPO
		    )

                    // copy build/dockerfiles/brew.Dockerfile to Dockerfile
                    sh('''rsync -avhz --checksum ${WORKSPACE}/sources/''' + SYNC_REPO + '''/build/dockerfiles/brew.Dockerfile ${WORKSPACE}/targetdwn/''' + SYNC_REPO + '''/Dockerfile''')

                    // append brew metadata to brew.Dockerfile after copying to downstream
                    sh('''#!/bin/bash -xe
METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
PRODNAME="codeready-workspaces" \\\r
COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
description="$DESCRIPTION" \\\r
io.k8s.description="$DESCRIPTION" \\\r
io.k8s.display-name=\"$DESCRIPTION" \\\r
io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
name="$PRODNAME/$COMPNAME" \\\r
version="''' + CRW_VERSION + '''" \\\r
license="EPLv2" \\\r
maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
io.openshift.expose-services="" \\\r
usage="" \r'
echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/''' + SYNC_REPO + '''/Dockerfile
                    ''')

                    util.updateBaseImages("${WORKSPACE}/targetdwn/" + SYNC_REPO, MIDSTM_BRANCH, "-q --no-commit")

                    // push to dist-git
                    sh('''#!/bin/bash -xe
                      export KRB5CCNAME=/var/tmp/crw-build_ccache
                      if [[ \$(git diff --name-only) ]]; then # file changed
                        git add . -A -f
                        git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
                        git push origin ''' + MIDSTM_BRANCH + ''' || true
                      fi
                    ''')
                    NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn/${SYNC_REPO}")
                    println "Got NEW_SHA in targetdwn/${SYNC_REPO} folder: " + NEW_SHA
                    currentBuild.description="Sync done"
                } // withCredentials
            } // wrap
        } // stage
    } // node
} // timeout

for (int i=0; i < nodeLabels.size(); i++) {
  def String nodeLabel = "${nodeLabels[i]}"
  print "[" + (i+1) + "/" + nodeLabels.size() + "] Create task to run on ${nodeLabel}"
  tasks[nodeLabels[i]] = { ->
    timeout(120) {
        node(nodeLabel){
            stage("Build artifacts on " + nodeLabel) {
                wrap([$class: 'TimestamperBuildWrapper']) {
                    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                    def util = load "${WORKSPACE}/util.groovy"
                    withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                        usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
                        file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
                        util.bootstrap(CRW_KEYTAB)
                        // build project in Jenkins so we can collect asset-* files later via get-sources-jenkins.sh, then trigger a build brew with those files
                        if (NEW_SHA != OLD_SHA || FORCE_BUILD == "true") {
                            util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/${SYNC_REPO}", MIDSTM_BRANCH)
                            util.loginToRegistries()
                            sh('''#!/bin/bash -xe
                              cd ${WORKSPACE}/''' + SYNC_REPO + '''
                              chmod +x ./build/dockerfiles/*.sh
                              ./build/dockerfiles/rhel.Dockerfile.extract.assets.sh
                            ''')
                            archiveArtifacts fingerprint: true, onlyIfSuccessful: true, allowEmptyArchive: false, artifacts: "asset-*.tar.gz, logs/*"
                            currentBuild.description+="; New ${nodeLabel} artifacts built"
                        } else {
                            println "No changes upstream, nothing to build in Jenkins!"
                            currentBuild.description+="; No new ${nodeLabel} artifacts"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } // withCredentials
                } // wrap
            } // stage
        } // node
    } // timeout
  } // tasks
} // for

stage("Builds") {
  println "########################################################################################################"
  println "##  Build ${SYNC_REPO} assets"
  println "########################################################################################################"
  parallel(tasks)
}

// kick off get-sources-rhpkg-container-build_2.y job
nodeLabel = "${nodeLabels[0]}"
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} containers"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (NEW_SHA != OLD_SHA || FORCE_BUILD == "true") {
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        build(
              job: 'get-sources-rhpkg-container-build_' + CRW_VERSION,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_PATHs',
                  value: "${DWNSTM_REPO}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'QUAY_REPO_PATHs',
                  value: util.getCRWShortName(SYNC_REPO) + "-rhel8"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: "${CRW_VERSION}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: true
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
        )
        currentBuild.description+="; Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description+="; No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
