#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// SCRATCH = true (don't push to Quay) or false (do push to Quay)
// SOURCE_BRANCH
// FORCE_BUILD = "false"

@Field String branchToBuildDev = "refs/tags/19"
@Field String branchToBuildParent = "refs/tags/7.15.0"
def SOURCE_BRANCH_Dashboard = SOURCE_BRANCH // use new dashboard https://issues.redhat.com/browse/CRW-1435

// TODO re-enable all tests here
// additional flags for maven, eg., to disable a module -pl '!org.eclipse.che.infrastructure:che-infrastructures-parent,!...'
@Field String MVN_EXTRA_FLAGS = "" 

def DWNSTM_REPO = "containers/codeready-workspaces" // dist-git repo to use as target for everything

// TODO move to node 12?
// current version used for crw-theia:
//def nodeVersion = "12.18.2"
// def yarnVersion = "1.17.3"
// current version used for crw-server:
def nodeVersion="10.19.0"
def yarnVersion="1.21.0"

def MVN_FLAGS="-Dmaven.repo.local=.repository/ -V -B -e"

def CRW_SHAs = ""

def DEV_path = "che-dev"
def VER_DEV = "VER_DEV"
def SHA_DEV = "SHA_DEV"

def PAR_path = "che-parent"
def VER_PAR = "VER_PAR"
def SHA_PAR = "SHA_PAR"

def CHE_DB_path = "che-dashboard"
def VER_CHE_DB = "VER_CHE_DB"
def SHA_CHE_DB = "SHA_CHE_DB"

def CHE_WL_path = "che-workspace-loader"
def VER_CHE_WL = "VER_CHE_WL"
def SHA_CHE_WL = "SHA_CHE_WL"

def CHE_path = "che"
def VER_CHE = "VER_CHE"
def VER_CHE_PREV = "VER_CHE_PREV"
def SHA_CHE = "SHA_CHE"

def CRW_path = "codeready-workspaces"
def VER_CRW = "VER_CRW"
def SHA_CRW = "SHA_CRW"

def OLD_SHA_MID=""
def OLD_SHA_DWN=""
def NEW_SHA_MID=""
def NEW_SHA_DWN=""

def String nodeLabel = 'rhel8'
timeout(240) {
  node(nodeLabel) {
    stage("Build ${DEV_path}, ${PAR_path}, ${CHE_DB_path}, ${CHE_WL_path}, and ${CRW_path}") {
        wrap([$class: 'TimestamperBuildWrapper']) {
            withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
                file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
            def util = load "${WORKSPACE}/util.groovy"
            cleanWs()
            util.installSkopeoFromContainer("")
            util.installPodman()
            util.installYq()
            // install maven 3.6 + JDK 11
            JAVA_VERSION="11"; util.installRPMs("java-"+JAVA_VERSION+"-openjdk java-"+JAVA_VERSION+"-openjdk-devel java-"+JAVA_VERSION+"-openjdk-headless")
            util.installMaven("3.6.3",JAVA_VERSION)

            CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
            println "CRW_VERSION = '" + CRW_VERSION + "'"

            util.bootstrap(CRW_KEYTAB)

            // log in to registries
            def statusCode = util.loginToRegistries()
            if (statusCode > 0) {
                currentBuild.result = 'FAILURE'
            } else {
                echo "===== Build che-dev =====>"
                util.cloneRepo("https://github.com/eclipse/${DEV_path}.git", DEV_path, branchToBuildDev)
                sh "mvn clean install ${MVN_FLAGS} -f ${DEV_path}/pom.xml ${MVN_EXTRA_FLAGS}"

                VER_DEV = sh(returnStdout:true,script:"egrep \"<version>\" ${DEV_path}/pom.xml|head -1|sed -e \"s#.*<version>\\(.\\+\\)</version>#\\1#\"").trim()
                SHA_DEV = util.getLastCommitSHA("${WORKSPACE}/${DEV_path}")
                echo "<===== Build che-dev ====="

                echo "===== Build che-parent =====>"
                util.cloneRepo("https://github.com/eclipse/${PAR_path}.git", PAR_path, branchToBuildParent)
                sh "mvn clean install ${MVN_FLAGS} -f ${PAR_path}/pom.xml ${MVN_EXTRA_FLAGS}"

                VER_PAR = sh(returnStdout:true,script:"egrep \"<version>\" ${PAR_path}/pom.xml|head -1|sed -e \"s#.*<version>\\(.\\+\\)</version>#\\1#\"").trim()
                SHA_PAR = util.getLastCommitSHA("${WORKSPACE}/${PAR_path}")
                echo "<===== Build che-parent ====="

                echo "===== Get CRW version =====>"
                util.cloneRepo("https://github.com/redhat-developer/codeready-workspaces.git", CRW_path, MIDSTM_BRANCH)
                VER_CRW = sh(returnStdout:true,script:"egrep \"<version>\" ${CRW_path}/pom.xml|head -2|tail -1|sed -e \"s#.*<version>\\(.\\+\\)</version>#\\1#\"").trim()
                SHA_CRW = util.getLastCommitSHA("${WORKSPACE}/${CRW_path}")
                echo "<===== Get CRW version ====="

                echo "===== Get Che version =====>"
                util.cloneRepo("https://github.com/eclipse/${CHE_path}.git", CHE_path, SOURCE_BRANCH)

                VER_CHE = sh(returnStdout:true,script:'''#!/bin/bash -xe
egrep "<version>" ''' + CHE_path + '''/pom.xml|head -2|tail -1|sed -r -e "s#.*<version>(.+)</version>#\\1#"
                ''').trim()
                // for VERSION=7.18.3, get BASE=7.18, PREV=2 so VER_CHE_PREV=7.18.2
                VER_CHE_PREV = sh(returnStdout:true,script:'''#!/bin/bash -xe
VERSION=$(egrep "<version>" ''' + CHE_path + '''/pom.xml|head -2|tail -1| sed -r -e "s#.*<version>(.+)-SNAPSHOT</version>#\\1#")
[[ $VERSION =~ ^([0-9]+)\\.([0-9]+)\\.([0-9]+) ]] && BASE="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"; PREV="${BASH_REMATCH[3]}"
let PREV=PREV-1; if [[ $PREV -lt 0 ]]; then PREV=0; fi # if -1, then 0
PREVVERSION="${BASE}.${PREV}"; echo ${PREVVERSION}
                ''').trim()

                SHA_CHE = util.getLastCommitSHA("${WORKSPACE}/${CHE_path}")
                echo "<==== Get Che version ====="

                echo "===== Build che-dashboard =====>"
                util.cloneRepo("https://github.com/eclipse/${CHE_DB_path}.git", CHE_DB_path, SOURCE_BRANCH_Dashboard)

                VER_CHE_DB = sh(returnStdout:true,script:"cat ${CHE_DB_path}/package.json | jq -r .version").trim()
                SHA_CHE_DB = util.getLastCommitSHA("${WORKSPACE}/${CHE_DB_path}")

                // set correct version of CRW Dashboard
                CRW_SHAs="${VER_CRW} :: ${JOB_NAME}/${BUILD_NUMBER} \
:: ${DEV_path} @ ${SHA_DEV} (${VER_DEV}) \
:: ${PAR_path} @ ${SHA_PAR} (${VER_PAR}) \
:: ${CHE_path} @ ${SHA_CHE} (${VER_CHE}) \
:: ${CRW_path} @ ${SHA_CRW} (${VER_CRW})"
                echo "CRW_SHAs (for dashboard) = ${CRW_SHAs}"

                // insert a longer version string which includes both CRW and Che, plus build and SHA info
                sh "sed -r -i -e \"s#(.+productVersion = ).+#\\1'${CRW_SHAs}';#g\" ${CHE_DB_path}/src/components/api/che-service.factory.ts"
                sh "egrep 'productVersion = ' ${CHE_DB_path}/src/components/api/che-service.factory.ts"

                // apply CRW CSS + fix doc links
                DOCS_VERSION = sh(returnStdout:true,script:"grep crw.docs.version ${CRW_path}/pom.xml | sed -r -e \"s#.*<.+>([0-9.SNAPSHOT-]+)</.+>#\\1#\"")
                def CRW_DOCS_BASEURL = ("https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces/" + DOCS_VERSION).trim()
                echo "CRW_DOCS_BASEURL = ${CRW_DOCS_BASEURL}"

                sh '''#!/bin/bash -xe
cd ''' + CHE_DB_path + '''
# ls -la src/assets/branding/
rsync -aPr ../''' + CRW_path + '''/assembly/branding/* src/assets/branding/
# ls -la src/assets/branding/
mv -f src/assets/branding/branding{-crw,}.css

# process product.json template
sed -r \
    -e "s#@@crw.version@@#'''+CRW_SHAs + '''#g" \
    -e "s#@@crw.docs.baseurl@@#''' + CRW_DOCS_BASEURL + '''#g" \
src/assets/branding/product.json.template > src/assets/branding/product.json
rm -f src/assets/branding/product.json.template
# cat src/assets/branding/product.json

docker build -f apache.Dockerfile -t crw-dashboard:tmp .
docker run --rm --entrypoint sh crw-dashboard:tmp -c 'tar -pzcf - /usr/local/apache2/htdocs/dashboard' > asset-dashboard.tar.gz
'''

                echo "<===== Build che-dashboard ====="

                echo "===== Build che-workspace-loader =====>"
                util.cloneRepo("https://github.com/eclipse/${CHE_WL_path}.git", CHE_WL_path, SOURCE_BRANCH)

                VER_CHE_WL = sh(returnStdout:true,script:"cat ${CHE_WL_path}/package.json | jq -r '.version'").trim()
                SHA_CHE_WL = util.getLastCommitSHA("${WORKSPACE}/${CHE_WL_path}")
                
                sh '''#!/bin/bash -xe
cd ''' + CHE_WL_path + '''
docker build -f apache.Dockerfile -t crw-workspace-loader:tmp .
docker run --rm --entrypoint sh crw-workspace-loader:tmp -c 'tar -pzcf - /usr/local/apache2/htdocs/workspace-loader' > asset-workspace-loader.tar.gz
'''

                echo "<===== Build che-workspace-loader ====="

                echo "===== Build che server assembly =====>"

                // TODO re-enable tests
                // TESTS_TO_EXCLUDE="-pl '!org.eclipse.che.infrastructure:che-infrastructures-parent,!org.eclipse.che.infrastructure:infrastructure-distributed,!org.eclipse.che.infrastructure:infrastructure-metrics,!org.eclipse.che.infrastructure:infrastructure-permission,!org.eclipse.che.infrastructure:infrastructure-kubernetes,!org.eclipse.che.infrastructure:infrastructure-openshift,!org.eclipse.che.core:cascade-removal'"
                sh "mvn -DskipTests clean install ${MVN_FLAGS} -P native -f ${CHE_path}/pom.xml ${MVN_EXTRA_FLAGS}"
                echo "<==== Build che server assembly ====="

                echo "===== Build CRW server assembly =====>"
                CRW_SHAs="${VER_CRW} :: ${JOB_NAME}/${BUILD_NUMBER} \
:: ${DEV_path} @ ${SHA_DEV} (${VER_DEV}) \
:: ${PAR_path} @ ${SHA_PAR} (${VER_PAR}) \
:: ${CHE_DB_path} @ ${SHA_CHE_DB} (${VER_CHE_DB}) \
:: ${CHE_WL_path} @ ${SHA_CHE_WL} (${VER_CHE_WL}) \
:: ${CHE_path} @ ${SHA_CHE} (${VER_CHE}) \
:: ${CRW_path} @ ${SHA_CRW} (${VER_CRW})"
                echo "CRW_SHAs (overall) = ${CRW_SHAs}"

                util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH)

                def SYNC_FILES_UP2DWN = "entrypoint.sh" // in che/dockerfiles/che/ folder

                OLD_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/${CRW_path}")
                println "Got OLD_SHA_MID in ${CRW_path} folder: " + OLD_SHA_MID

                OLD_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
                println "Got OLD_SHA_DWN in targetdwn folder: " + OLD_SHA_DWN

                sh '''#!/bin/bash -xe
cd ''' + CRW_path + '''

# CRW-1213 update the che.version in the pom, so we have the latest from the upstream branch
sed -i pom.xml -r -e "s#<che.version>.+</che.version>#<che.version>''' + VER_CHE_PREV + '''</che.version>#g"

# Check if che-machine-exec and che-theia plugins are current in upstream repo and if not, add them
pushd dependencies/che-plugin-registry >/dev/null
    ./build/scripts/add_che_plugins.sh -b ''' + MIDSTM_BRANCH + ''' ''' + VER_CHE_PREV + '''
popd >/dev/null

# updated downstream sources
DWNSTM_REPO="''' + DWNSTM_REPO + '''"

# rsync files in upstream github to dist-git
for d in ''' + SYNC_FILES_UP2DWN + '''; do
if [[ -f ${WORKSPACE}/''' + CHE_path + '''/dockerfiles/che/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/''' + CHE_path + '''/dockerfiles/che/${d} ${WORKSPACE}/targetdwn/${d}
fi
done
# rsync files in upstream github to midstream GH
for d in ''' + SYNC_FILES_UP2DWN + '''; do
if [[ -f ${WORKSPACE}/''' + CHE_path + '''/dockerfiles/che/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/''' + CHE_path + '''/dockerfiles/che/${d} ${WORKSPACE}/''' + CRW_path + '''/${d}
fi
done

# copy rhel.Dockerfile from upstream to CRW repo
cp ${WORKSPACE}/''' + CHE_path + '''/dockerfiles/che/rhel.Dockerfile ${WORKSPACE}/''' + CRW_path + '''/Dockerfile
# transform Che version to CRW version (in both locations)
sed -r -i ${WORKSPACE}/''' + CRW_path + '''/Dockerfile \
    `# transform che rhel.Dockerfile to CRW Dockerfile` \
    -e 's@/home/user/eclipse-che@/home/user/codeready@g' \
    -e 's@ADD eclipse-che .+@\\
# NOTE: if built in Brew, use get-sources-jenkins.sh to pull latest\\
COPY assembly/codeready-workspaces-assembly-main/target/codeready-workspaces-assembly-main.tar.gz /tmp/codeready-workspaces-assembly-main.tar.gz\\
RUN tar xzf /tmp/codeready-workspaces-assembly-main.tar.gz --transform="s#.*codeready-workspaces-assembly-main/*##" -C /home/user/codeready \\&\\& rm -f /tmp/codeready-workspaces-assembly-main.tar.gz\\
@g' \
    -e 's@chmod g\\+w /home/user/cacerts@chmod 777 /home/user/cacerts@g'

CRW_VERSION="''' + CRW_VERSION_F + '''"
# apply patches to downstream version
cp ${WORKSPACE}/''' + CRW_path + '''/Dockerfile ${WORKSPACE}/targetdwn/Dockerfile
sed -i ${WORKSPACE}/targetdwn/Dockerfile \
    -e "s#FROM registry.redhat.io/#FROM #g" \
    -e "s#FROM registry.access.redhat.com/#FROM #g" \
    -e "s#COPY assembly/codeready-workspaces-assembly-main/target/#COPY #g" \
    -e "s/# *RUN yum /RUN yum /g"

METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces server container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces server container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="server-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'$CRW_VERSION'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'
echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
'''
                // push changes in github to dist-git
                util.updateBaseImages("${WORKSPACE}/targetdwn", MIDSTM_BRANCH, "--nocommit")
                sh '''#!/bin/bash -xe
export KRB5CCNAME=/var/tmp/crw-build_ccache
cd ${WORKSPACE}/targetdwn

if [[ \$(git diff --name-only) ]]; then # file changed
  git add Dockerfile ''' + SYNC_FILES_UP2DWN + ''' . -A -f
  # note this might fail if we're syncing from a tag vs. a branch
  git commit -s -m "[sync] Update from ''' + CHE_path + ''' @ ''' + SHA_CHE + ''' + ''' + CRW_path + ''' @ ''' + SHA_CRW + '''" \
    Dockerfile ''' + SYNC_FILES_UP2DWN + ''' . || true
  git push origin ''' + MIDSTM_BRANCH + ''' || true
  echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + CHE_path + ''' @ ''' + SHA_CHE + ''' + ''' + CRW_path + ''' @ ''' + SHA_CRW + '''"
fi
cd ..
'''
                // push changes in github to dist-git
                util.updateBaseImages("${WORKSPACE}/${CRW_path}", MIDSTM_BRANCH, "--nocommit")
                sh '''#!/bin/bash -xe
cd ${WORKSPACE}/''' + CRW_path + '''
if [[ \$(git diff --name-only) ]]; then # file changed
    git add Dockerfile ''' + SYNC_FILES_UP2DWN + ''' . -A -f
    git commit -s -m "[sync] Update from ''' + CHE_path + ''' @ ''' + SHA_CHE + '''" \
      Dockerfile ''' + SYNC_FILES_UP2DWN + ''' . || true
    git push origin ''' + MIDSTM_BRANCH + ''' || true
    echo "[sync] Updated GH @ \$(git rev-parse --short=4 HEAD) from ''' + CHE_path + ''' @ ''' + SHA_CHE + '''"
fi
cd ..
'''

                NEW_SHA_MID = util.getLastCommitSHA("${WORKSPACE}/${CRW_path}")
                println "Got NEW_SHA_MID in ${CRW_path} folder: " + NEW_SHA_MID

                NEW_SHA_DWN = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
                println "Got NEW_SHA_DWN in targetdwn folder: " + NEW_SHA_DWN

                sh "mvn clean install ${MVN_FLAGS} -f ${CRW_path}/pom.xml -Dparent.version=\"${VER_PAR}\" -Dche.version=\"${VER_CHE}\" -Dcrw.dashboard.version=\"${CRW_SHAs}\" ${MVN_EXTRA_FLAGS}"

                // Add dashboard and workspace-loader to server assembly
                sh '''#!/bin/bash -xe
# unpack incomplete assembly
mkdir -p /tmp/''' + CRW_path + '''-assembly-main/tomcat/webapps/dashboard/ /tmp/''' + CRW_path + '''-assembly-main/tomcat/webapps/workspace-loader/
tar xvzf ''' + CRW_path + '''/assembly/''' + CRW_path + '''-assembly-main/target/codeready-workspaces-assembly-main.tar.gz -C /tmp/''' + CRW_path + '''-assembly-main/

# rename incomplete assembly
mv ''' + CRW_path + '''/assembly/''' + CRW_path + '''-assembly-main/target/codeready-workspaces-assembly-main{,-no-dashboard-no-workspace-loader}.tar.gz 

# unpack + move dashboard artifacts
tar xvzf ''' + CHE_DB_path + '''/asset-dashboard.tar.gz -C /tmp/''' + CRW_path + '''-assembly-main/tomcat/webapps/dashboard/
mv /tmp/''' + CRW_path + '''-assembly-main/tomcat/webapps/dashboard/usr/local/apache2/htdocs/dashboard/* \
    /tmp/''' + CRW_path + '''-assembly-main/codeready-workspaces-assembly-main/tomcat/webapps/dashboard/

# unpack + move workspace-loader artifacts
tar xvzf ''' + CHE_WL_path + '''/asset-workspace-loader.tar.gz -C /tmp/''' + CRW_path + '''-assembly-main/tomcat/webapps/workspace-loader/
mv /tmp/''' + CRW_path + '''-assembly-main/tomcat/webapps/workspace-loader/usr/local/apache2/htdocs/workspace-loader/* \
    /tmp/''' + CRW_path + '''-assembly-main/codeready-workspaces-assembly-main/tomcat/webapps/workspace-loader/

# clean up temp folder
rm -fr /tmp/''' + CRW_path + '''-assembly-main/tomcat/

# build new complete tarball assemlby with che server, dashboard, and workspace-loader
pushd /tmp/''' + CRW_path + '''-assembly-main/ >/dev/null; tar -pzcf codeready-workspaces-assembly-main.tar.gz ./*; popd >/dev/null
mv /tmp/''' + CRW_path + '''-assembly-main/codeready-workspaces-assembly-main.tar.gz ''' + CRW_path + '''/assembly/''' + CRW_path + '''-assembly-main/target/

# clean up incomplete assembly
rm -f ''' + CRW_path + '''/assembly/''' + CRW_path + '''-assembly-main/target/codeready-workspaces-assembly-main-no-dashboard-no-workspace-loader.tar.gz
'''

                archiveArtifacts fingerprint: true, artifacts:"**/*.log, **/assembly/*xml, **/assembly/**/*xml, ${CRW_path}/assembly/${CRW_path}-assembly-main/target/*.tar.*, **/asset-*.gz"

                echo "<===== Build CRW server assembly ====="

                def brewwebQuery = \
                "https://brewweb.engineering.redhat.com/brew/tasks?method=buildContainer&owner=crw-build/codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com&state=all&view=flat&order=-id"
                def descriptString=(
                    env.ghprbPullId && env.ghprbPullId?.trim()?\
                        "<a href=https://github.com/redhat-developer/${CRW_path}/pull/${env.ghprbPullId}>PR-${env.ghprbPullId}</a> ":\
                        ("${SCRATCH}"=="true"?\
                            "<a href=${brewwebQuery}>Scratch</a> ":\
                            "<a href=https://quay.io/repository/crw/server-rhel8?tab=tags>Quay</a> "\
                        )\
                    )\
                    + "Build #${BUILD_NUMBER} (" + (new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss")).format(new Date()) + ") <br/>\
 :: ${DEV_path} @ ${SHA_DEV} (${VER_DEV}) <br/>\
 :: ${PAR_path} @ ${SHA_PAR} (${VER_PAR}) <br/>\
 :: ${CHE_DB_path} @ ${SHA_CHE_DB} (${VER_CHE_DB}) <br/>\
 :: ${CHE_WL_path} @ ${SHA_CHE_WL} (${VER_CHE_WL}) <br/>\
 :: ${CHE_path} @ ${SHA_CHE} (${VER_CHE}) <br/>\
 :: ${CRW_path} @ ${SHA_CRW} (${VER_CRW})"
                echo "${descriptString}"
                currentBuild.description="${descriptString}"
            } // if login success
        } // with
      } // wrap
    } // stage
  } // node
} // timeout

timeout(120) {
  node(nodeLabel){ 
    stage ("Run get-sources-rhpkg-container-build") {
      def QUAY_REPO_PATHs=(env.ghprbPullId && env.ghprbPullId?.trim()?"":("${SCRATCH}"=="true"?"":"server-rhel8"))
      if (!NEW_SHA_MID.equals(OLD_SHA_MID) || !NEW_SHA_DWN.equals(OLD_SHA_DWN) || FORCE_BUILD.equals("true")) {
        echo "[INFO] Trigger get-sources-rhpkg-container-build " + (env.ghprbPullId && env.ghprbPullId?.trim()?"for PR-${ghprbPullId} ":"") + \
        "with SCRATCH = ${SCRATCH}, QUAY_REPO_PATHs = ${QUAY_REPO_PATHs}, JOB_BRANCH = ${MIDSTM_BRANCH}"

        // trigger OSBS build
        build(
          job: 'get-sources-rhpkg-container-build',
          wait: false,
          propagate: false,
          parameters: [
            [
            $class: 'StringParameterValue',
            name: 'GIT_PATHs',
            value: "containers/codeready-workspaces",
            ],
            [
            $class: 'StringParameterValue',
            name: 'GIT_BRANCH',
            value: "${MIDSTM_BRANCH}",
            ],
            [
            $class: 'StringParameterValue',
            name: 'QUAY_REPO_PATHs',
            value: "${QUAY_REPO_PATHs}",
            ],
            [
            $class: 'BooleanParameterValue',
            name: 'SCRATCH',
            value: "${SCRATCH}",
            ],
            [
            $class: 'StringParameterValue',
            name: 'JOB_BRANCH',
            value: "${CRW_VERSION_F}",
            ]
          ]
        )
      } else {
        echo "No changes upstream, Brew build not triggered"
        currentBuild.result='UNSTABLE'
      } // if else 
    } // stage
  } // node
} // timeout
