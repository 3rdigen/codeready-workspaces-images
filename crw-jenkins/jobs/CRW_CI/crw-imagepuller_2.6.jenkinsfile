#!/usr/bin/env groovy

// PARAMETERS for this pipeline:
// def FORCE_BUILD = "false"

import groovy.transform.Field

def SOURCE_REPO = "che-incubator/kubernetes-image-puller" // upstream source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-imagepuller" // dist-git repo to use as target

// NOTE: must create branches manually
@Field String SOURCE_BRANCH = "7.24.x" // upstream source repo branch from which to find and sync commits to pkgs.devel repo
def SCRATCH = "false"
def SYNC_REPO =  "imagepuller" // also used for the Brew dockerfile params
def SYNC_FILES = "cfg cmd deploy docker e2e hack pkg utils dev-guide.adoc go.mod go.sum LICENSE Makefile README.md"

def OLD_SHA=""
def SOURCE_SHA=""
def NEW_SHA=""


def String nodeLabel = 'rhel8'
timeout(120) {
  node(nodeLabel) {
    stage ("Sync repos on ${nodeLabel}") {
     wrap([$class: 'TimestamperBuildWrapper']) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        cleanWs()
        CRW_VERSION = util.getCrwVersion( MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        util.installSkopeoFromContainer("")
        util.installYq()
        util.installRhpkg()
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${SOURCE_REPO}.git"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
        SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")

        // can't yet generate a PR against eclipse/che-* repos, and can't push directly
        // so check for a new base image but DO NOT commit/push/pull-request
        util.updateBaseImages("${WORKSPACE}/sources", SOURCE_BRANCH, "-f Dockerfile --nocommit")

        println "########################################################################################################"
        println "##  Sync ${SYNC_REPO} to pkgs.devel"
        println "########################################################################################################"
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn",  MIDSTM_BRANCH)
        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got OLD_SHA in targetdwn folder: " + OLD_SHA

        // rsync files in github to dist-git
        sh('''#!/bin/bash -xe
          SYNC_FILES="''' + SYNC_FILES + '''"
          for d in ${SYNC_FILES}; do
            if [[ -f ${WORKSPACE}/sources/${d} ]]; then
              rsync -zrlt ${WORKSPACE}/sources/${d} ${WORKSPACE}/targetdwn/${d}
            elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
              # copy over the files
              rsync -zrlt ${WORKSPACE}/sources/${d}/* ${WORKSPACE}/targetdwn/${d}/
              # sync the directory and delete from targetdwn if deleted from source
              rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ${WORKSPACE}/targetdwn/${d}/
            fi
          done
        ''')

        sh('''#!/bin/bash -xe
          cp -f ${WORKSPACE}/sources/docker/Dockerfile ${WORKSPACE}/targetdwn/Dockerfile
          CRW_VERSION="''' + CRW_VERSION_F + '''"
          # apply patches to transform Che upstream to pkgs.devel version
          sed -i ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            `# Replace ubi8 with rhel8 version` \
            -e "s#ubi8/go-toolset#rhel8/go-toolset#g" \
            `# more replacements` \
            -e "s#FROM registry.redhat.io/#FROM #g" \
            -e "s#FROM registry.access.redhat.com/#FROM #g" \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=false|' \
            -e 's|^# *(COPY resources.tgz .+)|\\1|' \

        METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

          echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
        ''')

        // push changes in github to dist-git
        util.updateBaseImages("${WORKSPACE}/targetdwn", MIDSTM_BRANCH, "--nocommit")
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          SYNC_FILES="''' + SYNC_FILES + '''"
          cd ${WORKSPACE}/targetdwn
          if [[ \$(git diff --name-only) ]]; then # file changed
            git add Dockerfile ${SYNC_FILES}
            # note this might fail if we're syncing from a tag vs. a branch
            git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" Dockerfile ${SYNC_FILES}
            git push origin ''' + MIDSTM_BRANCH + ''' || true
            echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
          fi
        ''')
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")

        println "########################################################################################################"
        println "##  Update the tarballs"
        println "########################################################################################################"
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          # step 1 - build the container
          cd ${WORKSPACE}/targetdwn
          CONTAINERNAME="imagepullerbuilder"
          # transform Brew friendly Dockerfile so we can use it in Jenkins where base images need full registry path
          sed ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            -e 's|^ *COPY resources.tgz|# &|' \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=true|' \
            `# replace org/container:tag with reg-proxy/rh-osbs/org-container:tag` \
            `# DISABLED -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1-\\2:\\3#"` \
            -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry.redhat.io/\\1/\\2:\\3#" \
            `# replace ubi8-minimal:tag with reg-proxy/rh-osbs/ubi-minimal:tag` \
            `# DISABLED -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1:\\2#"` \
            -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry.redhat.io/\\1:\\2#" \
            > ${WORKSPACE}/bootstrap.Dockerfile
          echo "======= BOOTSTRAP DOCKERFILE =======>"
          cat ${WORKSPACE}/bootstrap.Dockerfile
          echo "<======= BOOTSTRAP DOCKERFILE ======="
          echo "======= START BOOTSTRAP BUILD =======>"
          docker build -t ${CONTAINERNAME} . --no-cache -f ${WORKSPACE}/bootstrap.Dockerfile \
            --target builder --build-arg BOOTSTRAP=true
          echo "<======= END BOOTSTRAP BUILD ======="
          # update tarballs - step 2 - create tarballs in targetdwn folder
          docker run --rm --entrypoint sh ${CONTAINERNAME} -c 'tar -pzcf - \
              /opt/app-root/src/go/pkg/mod' > /tmp/resources.tgz
          mkdir -p /tmp/resources
          tar xvzf /tmp/resources.tgz -C /tmp/resources
          # update tarballs - step 3 - check old sources' tarballs
          cd ${WORKSPACE}/targetdwn
          rhpkg sources
          # check diff
          if [[ -f ${WORKSPACE}/targetdwn/resources.tgz ]]; then
            BEFORE_DIR=/tmp/resources-before
            rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/resources.tgz -C ${BEFORE_DIR}
            TAR_DIFF=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/resources) || true
          else
            TAR_DIFF="No such file ${WORKSPACE}/targetdwn/resources.tgz -- creating a new one for the first time"
          fi
          if [[ ${TAR_DIFF} ]]; then
            echo "DIFF START *****"
            echo "${TAR_DIFF}"
            echo "***** END DIFF"
            mv -f /tmp/resources.tgz ${WORKSPACE}/targetdwn/resources.tgz
          fi
          # update tarballs - step 4 - commit changes if diff different
          if [[ ${TAR_DIFF} ]]; then
            rhpkg new-sources resources.tgz
            git commit -s -m "[tgz] Update resources.tgz" sources
            git push origin ''' + MIDSTM_BRANCH + '''
          else
            echo "No changes since previous tarball was created."
          fi
          # clean up diff dirs
          sudo rm -fr /tmp/resources /tmp/resources-before
        ''')

                NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
          println "Got NEW_SHA in targetdwn folder: " + NEW_SHA

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      } // withCredentials
    } // wrap
   } // stage
  } // node
} // timeout

// kick off get-sources-rhpkg-container-build_2.y job
node(nodeLabel) {
  stage ("Build container on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} container"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA.equals(OLD_SHA) || FORCE_BUILD == "true") {
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        build(
              job: 'get-sources-rhpkg-container-build_' + CRW_VERSION,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_PATHs',
                  value: "${DWNSTM_REPO}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'QUAY_REPO_PATHs',
                  value: util.getCRWShortName(SYNC_REPO) + "-rhel8"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: "${CRW_VERSION}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: FORCE_BUILD
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: SCRATCH
                ]
              ]
        )
        currentBuild.description="Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description="No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node

