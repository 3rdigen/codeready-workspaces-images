#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// FORCE_BUILD
// SOURCE_BRANCH
// MIDSTM_BRANCH 

def SOURCE_REPO = "eclipse/che-machine-exec" // upstream source repo from which to find and sync commits
def MIDSTM_REPO = "redhat-developer/codeready-workspaces-images" // repo to use as target
def SYNC_REPO = "machineexec"
def SYNC_FILES="activity api auth build cfg client cloud-shell common exec exec-info filter kubeconfig mocks output shell vendor ws-conn compile.sh CONTRIBUTING.md devfile.yaml go.mod go.sum LICENSE main.go VERSION README.md"

def OLD_SHA=""
def NEW_SHA=""

def String nodeLabel = 'rhel8||s390x-rhel8||ppc64le-rhel8'
timeout(120) {
  node(nodeLabel) {
    stage ("Sync repos on ${nodeLabel}") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        cleanWs()
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
            usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
        util.installSkopeoFromContainer("")
        util.installYq()
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${SOURCE_REPO}.git"
        println "########################################################################################################"
        SOURCE_DIR="${WORKSPACE}/sources"
        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", SOURCE_DIR, SOURCE_BRANCH)
        SOURCE_SHA = util.getLastCommitSHA(SOURCE_DIR)
        util.updateBaseImages(SOURCE_DIR, SOURCE_BRANCH, "-f Dockerfile --nocommit")

        println "########################################################################################################"
        println "##  Sync ${SYNC_REPO} to codeready-workspaces-images"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${MIDSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH)
        TARGET_DIR="${WORKSPACE}/targetdwn/" + util.getCRWLongName(SYNC_REPO)
        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got OLD_SHA in targetdwn folder: " + OLD_SHA

        // rsync files to codeready-workspaces-images
        sh('''#!/bin/bash -xe
          SOURCEDIR="''' + SOURCE_DIR + '''"
          TARGETDIR="''' + TARGET_DIR + '''"
          SYNC_FILES="''' + SYNC_FILES + '''"
          [ ! -d ${TARGETDIR} ] && mkdir -p ${TARGETDIR}
          for d in ${SYNC_FILES}; do
            if [[ -f ${SOURCEDIR}/${d} ]]; then
              rsync -azrlt ${SOURCEDIR}/${d} ${TARGETDIR}/${d}
            elif [[ -d ${SOURCEDIR}/${d} ]]; then
              # copy over the dir contents
              rsync -azrlt ${SOURCEDIR}/${d}/* ${TARGETDIR}/${d}/
              # sync the directory and delete from targetdwn if deleted from source
              rsync -azrlt --delete ${SOURCEDIR}/${d}/ ${TARGETDIR}/${d}/
            fi
          done
        ''')

        sh('''#!/bin/bash -xe
          cp -f ''' + SOURCE_DIR + '''/build/dockerfiles/rhel.Dockerfile ''' + TARGET_DIR + '''/Dockerfile
          CRW_VERSION="''' + CRW_VERSION_F + '''"
          #apply patches
          sed -i ''' + TARGET_DIR + '''/Dockerfile \
            `# Replace ubi8 with rhel8 version` \
            -e "s#ubi8/go-toolset#rhel8/go-toolset#g" \
            `# more replacements` \
            -e "s#FROM registry.redhat.io/#FROM #g" \
            -e "s#FROM registry.access.redhat.com/#FROM #g"

          METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
PRODNAME="codeready-workspaces" \\\r
COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
description="$DESCRIPTION" \\\r
io.k8s.description="$DESCRIPTION" \\\r
io.k8s.display-name=\"$DESCRIPTION" \\\r
io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
name="$PRODNAME/$COMPNAME" \\\r
version="'${CRW_VERSION}'" \\\r
license="EPLv2" \\\r
maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
io.openshift.expose-services="" \\\r
usage="" \r'

          echo -e "$METADATA" >> ''' + TARGET_DIR + '''/Dockerfile
        ''')

        // push changes to codeready-workspaces-images
        util.updateBaseImages(TARGET_DIR, MIDSTM_BRANCH, "--nocommit")
        sh('''#!/bin/bash -xe
          SYNC_FILES="''' + SYNC_FILES + '''"
          cd ${WORKSPACE}/targetdwn
          git add ''' + util.getCRWLongName(SYNC_REPO) + '''
          git update-index --refresh || true # ignore timestamp updates
          if [[ \$(git diff-index HEAD --) ]]; then # file changed
            cd ''' + TARGET_DIR + '''
            git add Dockerfile ${SYNC_FILES} . -A -f
            # note this might fail if we're syncing from a tag vs. a branch
            git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" Dockerfile ${SYNC_FILES} . || true
            git push origin ''' + MIDSTM_BRANCH + ''' || true
            NEW_SHA=\$(git rev-parse --short=4 HEAD) # echo ${NEW_SHA}
            echo "[sync] Updated codeready-workspaces-images @ ${NEW_SHA} from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
          fi
        ''')
        }
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got NEW_SHA in targetdwn folder: " + NEW_SHA

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
        currentBuild.description="Upstream sync done"

        println "########################################################################################################"
        println "##  Kickoff Sync to downstream job"
        println "########################################################################################################"
        if (!OLD_SHA.equals(NEW_SHA) || FORCE_BUILD == "true") {
          JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
          build(
              job: 'sync-to-downstream_' + JOB_BRANCH,
              wait: true,
              propagate: true,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: SYNC_REPO + "+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'REPOS',
                  value: util.getCRWLongName(SYNC_REPO)
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: JOB_BRANCH
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'MIDSTM_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: FORCE_BUILD
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
            )
          currentBuild.description+="; Downstream sync job triggered"
        } else {
          println "No changes upstream, nothing to sync / build in brew!"
          currentBuild.description+="; No sync or Brew build"
          currentBuild.result = 'UNSTABLE'
        }        
      } // withCredentials
    } // wrap
  } // node
} // timeout
