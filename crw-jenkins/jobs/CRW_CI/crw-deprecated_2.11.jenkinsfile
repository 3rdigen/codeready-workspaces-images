#!/usr/bin/env groovy
import groovy.transform.Field

// PARAMETERS for this pipeline:
//   MIDSTM_BRANCH

// Nodes to run artifact build on ex. ['rhel8||x86_64-rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def List nodeLabels = ['rhel8||x86_64-rhel8', 's390x-rhel8', 'ppc64le-rhel8']
def Map tasks = [failFast: false]

def CRW_path = "codeready-workspaces-deprecated"
for (int i=0; i < nodeLabels.size(); i++) {
    def String nodeLabel = "${nodeLabels[i]}"
    print "[" + (i+1) + "/" + nodeLabels.size() + "] Create task to run on ${nodeLabel}"
    tasks[nodeLabels[i]] = { ->
        timeout(180) {
            node(nodeLabel) { 
                stage ("Build artifacts on " + nodeLabel) {
                    withCredentials([
                        string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                        string(credentialsId: 'quay.io-crw-crwci_user_token', variable: 'QUAY_TOKEN'),
                        usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD')
                    ]) {
                        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
                        def util = load "${WORKSPACE}/util.groovy"
                        cleanWs()
                        util.installPodman() // RHEL8 only, includes docker emulation
                        sh('''#!/bin/bash -xe
                         df -h; du -sch . ${WORKSPACE} /tmp 2>/dev/null || true
                        ''')
                        util.cloneRepoWithBootstrap("https://github.com/redhat-developer/${CRW_path}.git", "${WORKSPACE}/${CRW_path}", MIDSTM_BRANCH, true)
                        def statusCode = sh(script: '''#!/bin/bash -xe
                        PODMAN=$(command -v podman || true)
                        if [[ ! -x $PODMAN ]]; then echo "[WARNING] podman is not installed."; PODMAN=$(command -v docker || true); fi
                        if [[ ! -x $PODMAN ]]; then echo "[ERROR] docker is not installed. Aborting."; exit 1; fi
                        echo "''' + QUAY_TOKEN + '''" | ${PODMAN} login -u="crw+crwci" --password-stdin quay.io
                        echo "''' + CRW_BOT_PASSWORD + '''" | ${PODMAN} login -u="''' + CRW_BOT_USERNAME + '''" --password-stdin registry.redhat.io
                        ''' + CRW_path + '''/build.sh
                        ''', returnStatus:true)
                        if (statusCode > 0) {
                            currentBuild.result = 'FAILURE'
                        }
                        util.createSums("${CRW_path}/*/target/", "*.tar.*")
                        archiveArtifacts fingerprint: false, artifacts: "${CRW_path}/*/target/*.tar.*"

                        SHA_CRW = util.getLastCommitSHA("${WORKSPACE}/${CRW_path}")
                        echo "Built ${CRW_path} from SHA: ${SHA_CRW}"
                        sh('''#!/bin/bash -xe
                        df -h; du -sch . ${WORKSPACE} /tmp 2>/dev/null || true
                        ''')

                        // sh 'printenv | sort'
                        def descriptString=(currentBuild.result.equals("FAILURE") ? "Failed:":"Build") + " #${BUILD_NUMBER} (" + (new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss")).format(new Date()) + ") <br/> :: ${CRW_path} @ ${SHA_CRW}"
                        echo "${descriptString}"
                        currentBuild.description="${descriptString}"
                    } // with
                } // stage
            } // node 
        } // timeout
    } // tasks
} // for

stage("${CRW_path} Builds") {
    parallel(tasks)
}
