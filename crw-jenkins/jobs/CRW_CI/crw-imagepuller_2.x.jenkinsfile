#!/usr/bin/env groovy

// PARAMETERS for this pipeline:
// SOURCE_BRANCH
// MIDSTM_BRANCH
// def FORCE_BUILD = "false"

import groovy.transform.Field

def SOURCE_REPO = "che-incubator/kubernetes-image-puller" // upstream source repo from which to find and sync commits
def DWNSTM_REPO = "redhat-developer/codeready-workspaces-images" // repo to use as target

def SYNC_REPO =  "imagepuller" // also used for the Brew dockerfile params
def SYNC_FILES = "cfg cmd deploy docker e2e hack pkg utils dev-guide.adoc go.mod go.sum LICENSE Makefile README.md"

def OLD_SHA=""
def SOURCE_SHA=""
def NEW_SHA=""


def String nodeLabel = 'rhel8'
timeout(120) {
  node(nodeLabel) {
    stage ("Sync repos on ${nodeLabel}") {
     wrap([$class: 'TimestamperBuildWrapper']) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        cleanWs()
        CRW_VERSION = util.getCrwVersion( MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        util.installSkopeoFromContainer("")
        util.installYq()
        util.installRhpkg()
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${SOURCE_REPO}.git"
        println "########################################################################################################"
        SOURCE_DIR="${WORKSPACE}/sources"
        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", SOURCE_DIR, SOURCE_BRANCH)
        SOURCE_SHA = util.getLastCommitSHA(SOURCE_DIR)

        // can't yet generate a PR against eclipse/che-* repos, and can't push directly
        // so check for a new base image but DO NOT commit/push/pull-request
        //TODO updateBaseImages should use SOURCE_BRANCH, but curl from CRW_VERSION
        util.updateBaseImages(SOURCE_DIR, SOURCE_BRANCH, "-f Dockerfile --nocommit")

        println "########################################################################################################"
        println "##  Sync ${SYNC_REPO} to codeready-workspaces-images"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn/", MIDSTM_BRANCH)
        TARGET_DIR="${WORKSPACE}/targetdwn/" + util.getCRWLongName(SYNC_REPO)
        OLD_SHA = util.getLastCommitSHA(TARGET_DIR)
        println "Got OLD_SHA in targetdwn folder: " + OLD_SHA

        // rsync files in github to dist-git
        sh('''#!/bin/bash -xe
          SYNC_FILES="''' + SYNC_FILES + '''"
          for d in ${SYNC_FILES}; do
            if [[ -f ${WORKSPACE}/sources/${d} ]]; then
              rsync -zrlt ${WORKSPACE}/sources/${d} ''' + TARGET_DIR + '''/${d}
            elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
              # copy over the files
              rsync -zrlt ${WORKSPACE}/sources/${d}/* ''' + TARGET_DIR + '''/${d}/
              # sync the directory and delete from targetdwn if deleted from source
              rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ''' + TARGET_DIR + '''/${d}/
            fi
          done
        ''')

        sh('''#!/bin/bash -xe
          cp -f ${WORKSPACE}/sources/docker/Dockerfile ''' + TARGET_DIR + '''/Dockerfile
          CRW_VERSION="''' + CRW_VERSION_F + '''"
          # apply patches to transform Che upstream to brew version
          sed -i ''' + TARGET_DIR + '''/Dockerfile --regexp-extended \
            `# Replace ubi8 with rhel8 version` \
            -e "s#ubi8/go-toolset#rhel8/go-toolset#g" \
            `# more replacements` \
            -e "s#FROM registry.redhat.io/#FROM #g" \
            -e "s#FROM registry.access.redhat.com/#FROM #g" \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=false|' \
            -e 's|^# *(COPY resources.tgz .+)|\\1|' \

        METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

          echo -e "$METADATA" >> ''' + TARGET_DIR + '''/Dockerfile
        ''')

        // push changes to github
        util.updateBaseImages(TARGET_DIR, MIDSTM_BRANCH, "--nocommit")
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          SYNC_FILES="''' + SYNC_FILES + '''"
          cd ${WORKSPACE}/targetdwn
          git add ''' + util.getCRWLongName(SYNC_REPO) + '''
          git update-index --refresh  # ignore timestamp updates
          if [[ \$(git diff-index HEAD --) ]]; then # file changed
            cd ''' + TARGET_DIR + '''
            git add Dockerfile ${SYNC_FILES} . -A -f
            # note this might fail if we're syncing from a tag vs. a branch
            git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" Dockerfile ${SYNC_FILES} . || true
            git push origin ''' + MIDSTM_BRANCH + ''' || true
            echo "[sync] Updated codeready-workspaces-images @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
          fi
        ''')
        NEW_SHA = util.getLastCommitSHA(TARGET_DIR)
        currentBuild.description="Upstream sync done"

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      } // withCredentials
    } // wrap
   } // stage
  } // node
} // timeout

// kick off get-sources-rhpkg-container-build job
node(nodeLabel) {
  stage ("Build container on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} container"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA.equals(OLD_SHA) || FORCE_BUILD == "true") {
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
        build(
              job: 'crw-sync-to-downstream_' + JOB_BRANCH,
              wait: true,
              propagate: true,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'REPOS',
                  value: util.getCRWLongName(SYNC_REPO)
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: JOB_BRANCH
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'MIDSTM_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: FORCE_BUILD
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
        )
        currentBuild.description+="; Downstream sync job triggered"
      } else {
        println "No changes upstream, nothing to sync / build in brew!"
        currentBuild.description+="; No sync or Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node