#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// SOURCE_BRANCH
// MIDSTM_BRANCH
// def FORCE_BUILD = "false"

def SOURCE_REPO = "eclipse/che-plugin-broker" // upstream source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO1 = "containers/codeready-workspaces-pluginbroker-metadata" // dist-git repo to use as target
def DWNSTM_REPO2 = "containers/codeready-workspaces-pluginbroker-artifacts" // dist-git repo to use as target
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def QUAY_PROJECT1 = "pluginbroker-metadata" // also used for the Brew dockerfile params
def QUAY_PROJECT2 = "pluginbroker-artifacts" // also used for the Brew dockerfile params
def SYNC_FILES = "brokers build cfg common CONTRIBUTING.md .dockerignore devfile.yaml .gitignore go.mod go.sum LICENSE Makefile model README.md utils vendor VERSION"

def OLD_SHA1=""
def OLD_SHA2=""
def NEW_SHA1=""
def NEW_SHA2=""
def SOURCE_SHA=""

def nodeLabel = "rhel8"
timeout(120) {
  node("${nodeLabel}"){ 
    stage ("Sync repos") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
        def util = load "${WORKSPACE}/util.groovy"
        cleanWs()
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        util.installSkopeoFromContainer("")
        util.installYq()
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
          file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
          util.bootstrap(CRW_KEYTAB)

          println "########################################################################################################"
          println "##  Clone and update github.com/${SOURCE_REPO}.git"
          println "########################################################################################################"
          util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
          SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")
          println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA

          println "########################################################################################################"
          println "##  Sync ${QUAY_PROJECT1} and ${QUAY_PROJECT2} to pkgs.devel"
          println "########################################################################################################"
          util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO1}", "${WORKSPACE}/target1", MIDSTM_BRANCH)
          OLD_SHA1 = util.getLastCommitSHA("${WORKSPACE}/target1")
          util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO2}", "${WORKSPACE}/target2", MIDSTM_BRANCH)
          OLD_SHA2 = util.getLastCommitSHA("${WORKSPACE}/target2")

          // rsync files in github to dist-git
          sh('''#!/bin/bash -xe
            SYNC_FILES="''' + SYNC_FILES + '''"
            for targetN in target1 target2; do
              for d in ${SYNC_FILES}; do
                if [[ -f ${WORKSPACE}/sources/${d} ]]; then
                  rsync -zrlt ${WORKSPACE}/sources/${d} ${WORKSPACE}/${targetN}/${d}
                elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
                  # copy over the files
                  rsync -zrlt ${WORKSPACE}/sources/${d}/* ${WORKSPACE}/${targetN}/${d}/
                  # sync the directory and delete from target if deleted from source
                  rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ${WORKSPACE}/${targetN}/${d}/
                fi
              done
            done
          ''')

          sh('''#!/bin/bash -xe
            for targetN in target1 target2; do
              # apply changes from upstream che-pluginbroker/build/*/rhel.Dockerfile to downstream Dockerfile
              SOURCEDOCKERFILE=""
              TARGETDOCKERFILE=""
              if [[ \$targetN == "target1" ]]; then
                SOURCEDOCKERFILE="${WORKSPACE}/sources/build/metadata/rhel.Dockerfile"
                TARGETDOCKERFILE="${WORKSPACE}/target1/Dockerfile"
                QUAY_PROJECT="''' + QUAY_PROJECT1 + '''"
              elif [[ \$targetN == "target2" ]]; then
                SOURCEDOCKERFILE="${WORKSPACE}/sources/build/artifacts/rhel.Dockerfile"
                TARGETDOCKERFILE="${WORKSPACE}/target2/Dockerfile"
                QUAY_PROJECT="''' + QUAY_PROJECT2 + '''"
              fi

              CRW_VERSION="''' + CRW_VERSION_F + '''"
              #apply patches
              if [[ ${SOURCEDOCKERFILE} != "" ]] && [[ ${TARGETDOCKERFILE} != "" ]]; then
                sed ${SOURCEDOCKERFILE} \
                  -e "s#FROM registry.redhat.io/#FROM #g" \
                  -e "s#FROM registry.access.redhat.com/#FROM #g" \
                  > ${TARGETDOCKERFILE}
              fi

              METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces '${QUAY_PROJECT}' container" \\\r
DESCRIPTION="Red Hat CodeReady Workspaces '${QUAY_PROJECT}' container" \\\r
PRODNAME="codeready-workspaces" \\\r
COMPNAME="'${QUAY_PROJECT}'-rhel8" \r
LABEL summary="$SUMMARY" \\\r
description="$DESCRIPTION" \\\r
io.k8s.description="$DESCRIPTION" \\\r
io.k8s.display-name=\"$DESCRIPTION" \\\r
io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
name="$PRODNAME/$COMPNAME" \\\r
version="'${CRW_VERSION}'" \\\r
license="EPLv2" \\\r
maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
io.openshift.expose-services="" \\\r
usage="" \r'

              echo -e "$METADATA" >> ${TARGETDOCKERFILE}
            done
          ''')

          // push changes in github to dist-git
          sh('''#!/bin/bash -xe
            export KRB5CCNAME=/var/tmp/crw-build_ccache
            SYNC_FILES="''' + SYNC_FILES + '''"
            for targetN in target1 target2; do
              cd ${WORKSPACE}/${targetN}
              if [[ \$(git diff --name-only) ]]; then # file changed
                git add Dockerfile ${SYNC_FILES}
                git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" Dockerfile ${SYNC_FILES}
                git push origin ''' + MIDSTM_BRANCH + '''
                echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
              fi
            done
          ''')

          util.updateBaseImages("${WORKSPACE}/target1", MIDSTM_BRANCH)
          NEW_SHA1 = util.getLastCommitSHA("${WORKSPACE}/target1")
          println "Got NEW_SHA1 in target1 folder: " + NEW_SHA1

          util.updateBaseImages("${WORKSPACE}/target2", MIDSTM_BRANCH)
          NEW_SHA2 = util.getLastCommitSHA("${WORKSPACE}/target2")
          println "Got NEW_SHA2 in target2 folder: " + NEW_SHA2

          if (NEW_SHA1.equals(OLD_SHA1) && NEW_SHA2.equals(OLD_SHA2) && !FORCE_BUILD.equals("true")) {
            currentBuild.result='UNSTABLE'
          }
        } // withCredentials
      } // wrap
    } // stage
  } // node
} // timeout

// kick off get-sources-rhpkg-container-build job
node(nodeLabel) {
  stage ("Build containers on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${QUAY_PROJECT1} and ${QUAY_PROJECT2} containers"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA1.equals(OLD_SHA1) || !NEW_SHA2.equals(OLD_SHA2) || FORCE_BUILD.equals("true")) {
        CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
        println "CRW_VERSION = '" + CRW_VERSION + "'"
        for (QUAY_REPO_PATH in [QUAY_PROJECT1, QUAY_PROJECT2]) {
          println ("Trigger get-sources-rhpkg-container-build for ${QUAY_REPO_PATH}-rhel8 from containers/codeready-workspaces-${QUAY_REPO_PATH} branch ${MIDSTM_BRANCH}, job branch ${CRW_VERSION} ...")
          build(
            job: 'get-sources-rhpkg-container-build',
            wait: false,
            propagate: false,
            parameters: [
              [
                $class: 'StringParameterValue',
                name: 'token',
                value: "CI_BUILD"
              ],
              [
                $class: 'StringParameterValue',
                name: 'cause',
                value: "${QUAY_REPO_PATH}+respin+by+${BUILD_TAG}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'GIT_BRANCH',
                value: "${MIDSTM_BRANCH}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'GIT_PATHs',
                value: "containers/codeready-workspaces-${QUAY_REPO_PATH}"
              ],
              [
                $class: 'StringParameterValue',
                name: 'QUAY_REPO_PATHs',
                value: "${QUAY_REPO_PATH}-rhel8"
              ],
              [
                $class: 'StringParameterValue',
                name: 'JOB_BRANCH',
                value: "${CRW_VERSION}"
              ],
              [
                $class: 'BooleanParameterValue',
                name: 'FORCE_BUILD',
                value: true
              ],
              [
                $class: 'BooleanParameterValue',
                name: 'SCRATCH',
                value: SCRATCH
              ]
            ]
          )
        }
        currentBuild.description="Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description="No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node

