#!/usr/bin/env groovy

import hudson.FilePath
import groovy.transform.Field

// PARAMETERS for this pipeline:
// mailSubject
// errataURL
// epicURL
// additionalNotes
// doSendEmail
// doOSBS
// RECIPIENTS
// MIDSTM_BRANCH

def sendMail(mailSubject,mailBody) { // NEW_OSBS
    def sender="nboldt@redhat.com" // # use a bot instead?
    emailext(
        subject: mailSubject,
        body: mailBody, 
        from: sender,
        to: RECIPIENTS,
        recipientProviders: [requestor()]
    )
}

def checkFailure(arrayLines,serverName,errorOccurred)
{
    arrayLines.each  { 
        line -> if (line?.toString().indexOf("No tags matching")>-1 || line?.toString().indexOf("ERROR")>-1) { 
            errorOccurred = errorOccurred + line + '\n'; 
            currentBuild.result = 'FAILURE'
        }
    }
    return errorOccurred
}

def errorOccurred = ""

def nodeLabel = "rhel8||rhel8-8gb"
timeout(90) {
    node("${nodeLabel}"){ 
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
            def util = load "${WORKSPACE}/util.groovy"
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
            try { 
                stage "Fetch latest image tags and send email"
                cleanWs()
                util.installSkopeoFromContainer("")
                util.installYq()
                util.installBrewKoji()
                MMdd = ""+(new java.text.SimpleDateFormat("MM-dd")).format(new Date())
                if (mailSubject.contains("CRW " + JOB_BRANCH + ".0.tt-" + MMdd + " ready for QE") || mailSubject.equals(""))
                {
                    doSendEmail="false"
                    errorOccurred = errorOccurred + 'Error: need to set an actual email subject. Failure!\n'
                    currentBuild.description="Invalid email subject!"
                    currentBuild.result = 'FAILURE'
                } else {
                    currentBuild.description=mailSubject
                    sh (
                        script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+MIDSTM_BRANCH+'/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh',
                        returnStdout: true).trim().split( '\n' )
                    sh (
                        script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+MIDSTM_BRANCH+'/product/getTagForImage.sh && chmod +x getTagForImage.sh',
                        returnStdout: true).trim().split( '\n' )
                    def NEW_QUAY = ""
                    def NEW_OSBS = ""
                    def NEW_NVR = ""
                    parallel quay_check: {
                        NEW_QUAY = sh (
                            script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --quay --tag ${CRW_VERSION}- --hide | tee ${WORKSPACE}/LATEST_IMAGES.quay",
                            returnStdout: true).trim().split( '\n' )
                            errorOccurred = checkFailure(NEW_QUAY, "Quay", errorOccurred)
                    }, 
                    osbs_check: {
                        if (doOSBS.equals("true")) {
                            NEW_OSBS = sh (
                            script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --osbs --tag ${CRW_VERSION}- --hide | tee ${WORKSPACE}/LATEST_IMAGES.osbs",
                            returnStdout: true).trim().split( '\n' )
                            errorOccurred = checkFailure(NEW_OSBS, "OSBS", errorOccurred)
                        }
                    }, 
                    nvr_check: {
                        NEW_NVR = sh (
                            script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --nvr | tee ${WORKSPACE}/LATEST_IMAGES.nvr",
                            returnStdout: true).trim().split( '\n' )
                    }

                    // diff quay tag list vs. nvr tag list
                    sh(script: '''#!/bin/bash -xe
        ${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.quay) > ${WORKSPACE}/LATEST_IMAGES.quay.tagsonly
        ${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.nvr)  > ${WORKSPACE}/LATEST_IMAGES.nvr.tagsonly
        ''', returnStdout: true)
                    def DIFF_LATEST_IMAGES_QUAY_V_NVR = sh (
                        script: 'diff -u0 ${WORKSPACE}/LATEST_IMAGES.{quay,nvr}.tagsonly | grep -v "@@" | grep -v "LATEST_IMAGES" || true',
                        returnStdout: true
                    ).trim()

                    def DIFF_LATEST_IMAGES_QUAY_V_OSBS = ""

                    if (doOSBS.equals("true")) {
                        // diff quay tag list vs. OSBS tag list
                        sh(script: '''#!/bin/bash -xe
            ${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.osbs)  > ${WORKSPACE}/LATEST_IMAGES.osbs.tagsonly
            ''', returnStdout: true)
                        DIFF_LATEST_IMAGES_QUAY_V_OSBS = sh (
                            script: 'diff -u0 ${WORKSPACE}/LATEST_IMAGES.{quay,osbs}.tagsonly | grep -v "@@" | grep -v "LATEST_IMAGES" || true',
                            returnStdout: true
                        ).trim()
                    }

                    archiveArtifacts fingerprint: false, artifacts:"LATEST_IMAGES*"
                    if (!DIFF_LATEST_IMAGES_QUAY_V_NVR.equals("") || !DIFF_LATEST_IMAGES_QUAY_V_OSBS.equals("")) {
                        // error! quay and nvr versions do not match
                        errorOccurred = errorOccurred + 'Error: Quay & Brew image versions not aligned:\n' + 
                        "=================== QUAY v NVR ===================\n" + 
                        DIFF_LATEST_IMAGES_QUAY_V_NVR + '\n' + 
                        "=================== QUAY v OSBS ===================\n" + 
                        DIFF_LATEST_IMAGES_QUAY_V_OSBS + '\n' + 
                        ' Failure!\n'
                        currentBuild.description="Quay/Brew version mismatch!"
                        currentBuild.result = 'FAILURE'

                        // trigger a push of latest images in Brew to Quay
                        build job: "push-latest-containers-to-quay_${MIDSTM_BRANCH}", 
                            parameters: [[$class: 'StringParameterValue', name: 'MIDSTM_BRANCH', value: "${MIDSTM_BRANCH}"]],
                            propagate: false,
                            wait: true

                        // trigger an update of metadata and registries
                        build job: "update-digests-in-registries-and-metadata_${MIDSTM_BRANCH}",
                            parameters: [[$class: 'StringParameterValue', name: 'MIDSTM_BRANCH', value: "${MIDSTM_BRANCH}"]],
                            propagate: false,
                            wait: true
                    }

                    def NEW_QUAY_L=""; NEW_QUAY.each { line -> if (line?.trim()) { NEW_QUAY_L=NEW_QUAY_L+"- ${line}\n" } }
                    def NEW_OSBS_L=""; NEW_OSBS.each { line -> if (line?.trim()) { NEW_OSBS_L=NEW_OSBS_L+"= ${line}\n" } }
                    def NEW_NVR_L="";  NEW_NVR.each  { line -> if (line?.trim()) { NEW_NVR_L=NEW_NVR_L + "  ${line}\n" } } 

                    def mailBody = mailSubject + '''

Latest crwctl builds:

''' + JENKINS_URL + '''job/CRW_CI/job/crwctl_''' + JOB_BRANCH + '''/lastSuccessfulBuild/artifact/codeready-workspaces-chectl/dist/channels/
- or -
https://github.com/redhat-developer/codeready-workspaces-chectl/releases (if copied there)

Quay Images:
''' + NEW_QUAY_L

    if (doOSBS.equals("true")) { 
        mailBody = mailBody + '''
OSBS Images:
''' + NEW_OSBS_L
    }

    mailBody = mailBody + '''
Brew NVRs (for use in ''' + errataURL + '''):
''' + NEW_NVR_L

    mailBody = mailBody + '''
Unresolved blockers + criticals:
''' + epicURL + '''?jql=fixversion%20%3D%20''' + CRW_VERSION +
'''.0.GA%20AND%20project%20%3D%20CRW%20AND%20priority%20%3E%20Major%20AND%20resolution%20is%20null'''

    if (!additionalNotes.equals("")) {
    mailBody = mailBody + '''
---------------

''' + additionalNotes
    }

    mailBody = mailBody + '''

---------------
Generated by ''' + BUILD_URL + '''
'''

                    echo "Subject: " + mailSubject + "\n\n" +
    "Body: \n" +  
    "============================================================\n" + 
    mailBody + 
    "\n============================================================\n"

                    if (doSendEmail.equals("true") && errorOccurred.equals(""))
                    {
                        sendMail(mailSubject,mailBody)
                    }
                }
                if (!errorOccurred.equals("")) {
                    echo errorOccurred
                }
            } catch (e) {
                if (!errorOccurred.equals("")) {
                    echo errorOccurred
                    return
                }
                throw e
            }
        } // withCreds
    } // node
} // timeout