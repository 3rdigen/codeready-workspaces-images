#!/usr/bin/env groovy
import groovy.transform.Field

// PARAMETERS for this pipeline:
//   MIDSTM_BRANCH

// Required due to JENKINS-27421
// from https://stackoverflow.com/questions/42770775/how-to-define-and-iterate-over-map-in-jenkinsfile
@NonCPS
List<List<?>> mapToList(Map map) {
  return map.collect { it ->
    [it.key, it.value]
  }
}

def String nodeLabel = 'rhel8'
node(nodeLabel) {
    stage ("Trigger builds for whole CRW stack on ${nodeLabel}") {
        wrap([$class: 'TimestamperBuildWrapper']) {
            sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
            def util = load "${WORKSPACE}/util.groovy"
            cleanWs()
            util.installSkopeoFromContainer("")
            util.installYq()
            util.installRhpkg()
            util.installBrewKoji()
            CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
            currentBuild.description="Jobs run:"
            withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
                    file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {

                def currentJob="" // name of job
                def prevSuccesfulBuildId="" // lastSuccesfulBuild id (last one before this started)
                def lastSuccesfulBuildId="" // lastSuccesfulBuild id (build in progress)
                def currentQuayImage="" // last successful quay tag
                def jenkinsPath="/job/CRW_CI/job/"
                def jenkinsURL="${JENKINS_URL}${jenkinsPath}".replaceAll("//job","/job")

                def List PHASE_LIST = PHASES.tokenize(" ").collect { it.trim() }

                if (PHASE_LIST.contains("1")) {
                    // rebuild lang server artifacts
                    currentJob="crw-deprecated_" + CRW_VERSION
                    prevSuccesfulBuildId = util.getLastBuildId(JENKINS_URL + jenkinsPath + currentJob) // eg., #5
                    println ("Got prevSuccesfulBuildId = " + prevSuccesfulBuildId)
                    lastSuccesfulBuildId = util.runJob(jenkinsPath + currentJob, true) // DO wait for this to finish, eg., #6
                    util.waitForNewBuild("${jenkinsURL}" + currentJob, prevSuccesfulBuildId) // eg., wait until #5 -> #6
                    currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJob}/${lastSuccesfulBuildId}>${currentJob}#${lastSuccesfulBuildId}</a>"
                }

                if (PHASE_LIST.contains("2")) {
                    // all the sidecars - start this early since it's 10 builds
                    currentJob="crw-sync-to-downstream_" + CRW_VERSION
                    lastSuccesfulBuildId = util.runJob(jenkinsPath + currentJob) // don't wait for this to finish
                    currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJob}/${lastSuccesfulBuildId}>${currentJob}#${lastSuccesfulBuildId}</a>"
                }

                currentQuayImageTheia=""
                currentQuayImageTheiaEndpoint=""
                if (PHASE_LIST.contains("3")) {
                    // theia assets (sources) + theia-containers and akamai update too - start early since it's long running
                    currentJob="crw-theia-sources_" + CRW_VERSION
                    currentQuayImageTheia = util.getLatestImageAndTag("crw/theia-rhel8", "quay")
                    println ("Got currentQuayImageTheia = " + currentQuayImageTheia)
                    currentQuayImageTheiaEndpoint = util.getLatestImageAndTag("crw/theia-endpoint-rhel8", "quay")
                    println ("Got currentQuayImageTheiaEndpoint = " + currentQuayImageTheiaEndpoint)
                    lastSuccesfulBuildId = util.runJob(jenkinsPath + currentJob) // don't wait for this to finish
                    currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJob}/${lastSuccesfulBuildId}>${currentJob}#${lastSuccesfulBuildId}</a>"
                }

                if (PHASE_LIST.contains("4")) {
                    def jobsList = [
                        "server":"server-rhel8",
                        "configbump":"configbump-rhel8",
                        "operator":"crw-2-rhel8-operator",
                        "imagepuller":"imagepuller-rhel8",
                        "jwtproxy":"jwtproxy-rhel8",
                        "machine-exec":"machineexec-rhel8",
                        "pluginbrokers":"pluginbroker-artifacts-rhel8",
                        "traefik":"traefik-rhel8"
                        ]

                    // rebuild other containers and wait for results in quay.io
                    currentQuayImagePluginbrokerMetadata = util.getLatestImageAndTag("crw/pluginbroker-metadata-rhel8", "quay")
                    println ("Got currentQuayImagePluginbrokerMetadata = " + currentQuayImagePluginbrokerMetadata)
                    for (kv in mapToList(jobsList)) {
                        // .key = kv[0]
                        // .value = kv[1]
                        currentJob="crw-" + kv[0] + "_" + CRW_VERSION
                        currentQuayImage = util.getLatestImageAndTag("crw/" + kv[1], "quay")
                        println ("Got currentQuayImage (" + kv[0] + ") = " + currentQuayImage)
                        lastSuccesfulBuildId = util.runJob(jenkinsPath + currentJob) // don't wait for these to finish
                        util.waitForNewQuayImage("crw/" + kv[1], currentQuayImage)
                        currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJob}/${lastSuccesfulBuildId}>${currentJob}#${lastSuccesfulBuildId}</a>"
                    }
                    // TODO: should these wait checks all run in parallel? if so need to store unique currentQuayImage* values to compare them
                    util.waitForNewQuayImage("crw/pluginbroker-metadata-rhel8", currentQuayImagePluginbrokerMetadata)
                }

                if (PHASE_LIST.contains("3")) {
                    // wait until theia is rebuilt too
                    util.waitForNewQuayImage("crw/theia-rhel8", currentQuayImageTheia)
                    util.waitForNewQuayImage("crw/theia-endpoint-rhel8", currentQuayImageTheiaEndpoint)
                }

                if (PHASE_LIST.contains("5")) {
                    currentQuayImageMetadata = util.getLatestImageAndTag("crw/crw-2-rhel8-operator-metadata", "quay")
                    println ("Got currentQuayImageMetadata = " + currentQuayImageMetadata)

                    // trigger update-digests job (to rebuild registries and metadata images)
                    currentJob="update-digests-in-registries-and-metadata_" + CRW_VERSION
                    lastSuccesfulBuildId = util.runJob(jenkinsPath + currentJob, true) // DO wait for this to finish
                    currentBuild.description+="<br/>* <a href=${jenkinsPath}${currentJob}/${lastSuccesfulBuildId}>${currentJob}#${lastSuccesfulBuildId}</a>"
                    util.waitForNewQuayImage("crw/crw-2-rhel8-operator-metadata", currentQuayImageMetadata)
                }

                // TODO CRW-1348 trigger rpm signature check job as PHASE 6 once metadata image is updated

            } // withCredentials
        } // wrap
    } // stage
} // node
