#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// MIDSTM_BRANCH="crw-2.y-rhel-8"
// TAG_RELEASE = true/false. If true, tag the repos; if false, proceed w/o tagging

def MIDSTM_BRANCHNEXT = "crw-2-rhel-8"
def DWNSTM_BRANCH = MIDSTM_BRANCH // target branch in dist-git repo, eg., crw-2.y-rhel-8
def MVN_FLAGS="-Dmaven.repo.local=.repository/ -V -B -e"
def buildNode = "rhel8||s390x-rhel8||ppc64le-rhel8"
timeout(120) {
  node("${buildNode}"){
    stage("Collect 3rd party sources") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
          sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
          def util = load "${WORKSPACE}/util.groovy"
          cleanWs()
          util.installSkopeoFromContainer("")
          util.installYq()
          util.installRhpkg()
          util.installNPM(util.getTheiaBuildParam("nodeVersion"), util.getTheiaBuildParam("yarnVersion"))
          util.installRPMs("tree golang php-devel php-json python3-six python3-pip python3-virtualenv")
          JAVA_VERSION="11"; util.installRPMs("java-"+JAVA_VERSION+"-openjdk java-"+JAVA_VERSION+"-openjdk-devel java-"+JAVA_VERSION+"-openjdk-headless")
          util.installMaven("3.6.3", JAVA_VERSION)
          sh '''#!/bin/bash -xe
jq --version; echo "-----"
yq --version; echo "-----"
go version; echo "-----"
echo -n "node "; node --version; echo "-----"
echo -n "npm "; npm --version; echo "-----"
mvn --version; echo "-----"
php --version; echo "-----"
python3 --version; echo "-----"
'''

          CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
          println "CRW_VERSION = '" + CRW_VERSION + "'"
          CSV_VERSION = util.getCSVVersion(MIDSTM_BRANCH)
          println "CSV_VERSION = '" + CSV_VERSION + "'"
          util.bootstrap(CRW_KEYTAB)
          util.cloneRepo("https://github.com/redhat-developer/codeready-workspaces.git", "${WORKSPACE}/crw", MIDSTM_BRANCH)

          if (TAG_RELEASE.equals("true")) {
            currentBuild.description="Tagging " + CSV_VERSION + "..."
            sh '''#!/bin/bash -xe
cd ${WORKSPACE}/crw/product/ && ./tagRelease.sh -t ''' + CRW_VERSION + ''' -v ''' + CSV_VERSION + ''' \
  -gh ''' + MIDSTM_BRANCH + ''' -ghtoken ''' + GITHUB_TOKEN + ''' -pd ''' + DWNSTM_BRANCH + ''' -pduser crw-build
'''
            currentBuild.description="Tagged " + CSV_VERSION + "; Collecting manifests for " + CSV_VERSION
          } else {
            currentBuild.description="Collecting manifests for " + CSV_VERSION
          }

          sh '''#!/bin/bash -xe
CSV_VERSION="''' + CSV_VERSION + '''"
echo CSV_VERSION = ${CSV_VERSION}

# generate source files
cd ${WORKSPACE}/crw/product/manifest/
export GITHUB_TOKEN=''' + GITHUB_TOKEN + ''' # echo "''' + GITHUB_TOKEN + '''"
./get-3rd-party-deps-manifests.sh -v ${CSV_VERSION} -b ''' + MIDSTM_BRANCH + '''

# copy over the dir contents
rsync -azrlt ${WORKSPACE}/${CSV_VERSION}/* ${WORKSPACE}/crw/product/manifest/${CSV_VERSION}/
# sync the directory and delete from target if deleted from source
rsync -azrlt --delete ${WORKSPACE}/${CSV_VERSION}/ ${WORKSPACE}/crw/product/manifest/${CSV_VERSION}/
tree ${WORKSPACE}/crw/product/manifest/${CSV_VERSION}

git add ${CSV_VERSION}
git commit -s -m "[prodsec] Update product security manifests for ${CSV_VERSION}" ${CSV_VERSION}
git push origin ''' + MIDSTM_BRANCH + '''

# push manifests to MIDSTM_BRANCHNEXT branch too
lastcommit="$(git rev-parse HEAD)"
git fetch || true
git checkout --track origin/''' + MIDSTM_BRANCHNEXT + '''
git pull origin ''' + MIDSTM_BRANCHNEXT + '''
git cherry-pick $lastcommit
git push origin ''' + MIDSTM_BRANCHNEXT + '''
'''
          if (ARCHIVE_ARTIFACTS_IN_JENKINS.equals("true")) {
            archiveArtifacts allowEmptyArchive: true, artifacts: "crw/product/manifest/${CSV_VERSION}/**"
          }
        } // with
      } // wrap
    } // stage
  } //node
} // timeout