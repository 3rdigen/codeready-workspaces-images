#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// MIDSTM_BRANCH

def buildNode = "rhel8"
timeout(120) {
  node("${buildNode}"){
    stage("Collect 3rd party sources") {
      wrap([$class: 'TimestamperBuildWrapper']) {
        withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'),
            file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
          sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
          def util = load "${WORKSPACE}/util.groovy"
          cleanWs()
          util.installSkopeoFromContainer("")
          util.installRhpkg()
          util.installYq()

          CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
          println "CRW_VERSION = '" + CRW_VERSION + "'"
          CSV_VERSION = util.getCSVVersion(MIDSTM_BRANCH)
          println "CSV_VERSION = '" + CSV_VERSION + "'"

          util.bootstrap(CRW_KEYTAB)
          currentBuild.description="Collecting sources for " + CSV_VERSION + " ..."
          util.cloneRepo("https://github.com/redhat-developer/codeready-workspaces.git", "${WORKSPACE}/crw", MIDSTM_BRANCH)

          sh '''#!/bin/bash -xe
# generate source files
cd ${WORKSPACE}/crw/product/manifest/ && ./get-3rd-party-sources.sh --clean -b ''' + MIDSTM_BRANCH + '''
'''
          currentBuild.description="Sources collected for " + CSV_VERSION

          if (ARCHIVE_ARTIFACTS_IN_JENKINS.equals("true")) {
          archiveArtifacts allowEmptyArchive: true, 
            artifacts: "sources/containers/**, sources/vscode/**, crw/product/manifest/${CSV_VERSION}/**"
          }

          // Upload the artifacts and sources to RCM_GUEST server
          if (PUBLISH_ARTIFACTS_TO_RCM.equals("true")) {
            sh '''#!/bin/bash -xe
cd ${WORKSPACE}/crw/product/manifest/

# set up sshfs mount
DESTHOST="crw-build/codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com@rcm-guest.app.eng.bos.redhat.com"
RCMG="${DESTHOST}:/mnt/rcm-guest/staging/crw"
sshfs --version
for mnt in RCMG; do 
  mkdir -p ${WORKSPACE}/${mnt}-ssh; 
  if [[ $(file ${WORKSPACE}/${mnt}-ssh 2>&1) == *"Transport endpoint is not connected"* ]]; then fusermount -uz ${WORKSPACE}/${mnt}-ssh; fi
  if [[ ! -d ${WORKSPACE}/${mnt}-ssh/crw ]]; then  sshfs ${!mnt} ${WORKSPACE}/${mnt}-ssh; fi
done

# copy files to rcm-guest
ssh "${DESTHOST}" "cd /mnt/rcm-guest/staging/crw && mkdir -p CRW-''' + CSV_VERSION + '''/sources/containers CRW-''' + CSV_VERSION + '''/sources/vscode && ls -la . "
rsync -zrlt --rsh=ssh --protocol=28 ${WORKSPACE}/manifest-srcs.txt  ${WORKSPACE}/${mnt}-ssh/CRW-''' + CSV_VERSION + '''/sources/
rsync -zrlt --rsh=ssh --protocol=28  --delete ${WORKSPACE}/sources/containers/* ${WORKSPACE}/${mnt}-ssh/CRW-''' + CSV_VERSION + '''/sources/containers/
rsync -zrlt --rsh=ssh --protocol=28  --delete ${WORKSPACE}/sources/vscode/*     ${WORKSPACE}/${mnt}-ssh/CRW-''' + CSV_VERSION + '''/sources/vscode/
ssh "${DESTHOST}" "cd /mnt/rcm-guest/staging/crw/CRW-''' + CSV_VERSION + '''/ && tree"
ssh "${DESTHOST}" "/mnt/redhat/scripts/rel-eng/utility/bus-clients/stage-mw-release CRW-''' + CSV_VERSION + '''"
'''
          }
          currentBuild.description+="; pushed to RCM"
        } // with
      } // wrap
    } // stage
  } //node
} // timeout