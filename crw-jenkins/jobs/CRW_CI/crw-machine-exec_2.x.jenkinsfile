#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// SOURCE_BRANCH
// MIDSTM_BRANCH
// FORCE_BUILD = "false"

def SOURCE_REPO = "eclipse/che-machine-exec" // upstream source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-machineexec" // dist-git repo to use as target
def SYNC_REPO = "machineexec"
def SYNC_FILES="activity api auth build cfg client cloud-shell common exec exec-info filter kubeconfig mocks output shell vendor ws-conn compile.sh CONTRIBUTING.md devfile.yaml go.mod go.sum LICENSE main.go VERSION README.md"

def SOURCE_SHA=""
def OLD_SHA=""
def NEW_SHA=""

def String nodeLabel = 'rhel8'
timeout(120) {
  node(nodeLabel) {
    stage ("Sync repos on ${nodeLabel}") {
      wrap([$class: 'TimestamperBuildWrapper']) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
      def util = load "${WORKSPACE}/util.groovy"
      cleanWs()
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN'), 
          usernamePassword(credentialsId: 'registry.redhat.io_crw_bot', usernameVariable: 'CRW_BOT_USERNAME', passwordVariable: 'CRW_BOT_PASSWORD'),
          file(credentialsId: 'crw_crw-build-keytab', variable: 'CRW_KEYTAB')]) {
        util.installSkopeoFromContainer("")
        util.installYq()
        util.bootstrap(CRW_KEYTAB)
        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", MIDSTM_BRANCH)

        SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")

        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got OLD_SHA in targetdwn folder: " + OLD_SHA

        util.updateBaseImages("${WORKSPACE}/sources", SOURCE_BRANCH, "-f Dockerfile --nocommit")

        sh '''#!/bin/bash -xe
hasChanged=0
SOURCEDOCKERFILE=${WORKSPACE}/sources/build/dockerfiles/rhel.Dockerfile
# rsync files in github to dist-git
for d in ''' + SYNC_FILES + '''; do
  if [[ -f ${WORKSPACE}/sources/${d} ]]; then
    rsync -zrlt ${WORKSPACE}/sources/${d} ${WORKSPACE}/targetdwn/${d}
  elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
    # copy over the files
    rsync -zrlt ${WORKSPACE}/sources/${d}/* ${WORKSPACE}/targetdwn/${d}/
    # sync the directory and delete from targetdwn if deleted from source
    rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ${WORKSPACE}/targetdwn/${d}/
  fi
done

cp -f ${SOURCEDOCKERFILE} ${WORKSPACE}/targetdwn/Dockerfile

CRW_VERSION="''' + CRW_VERSION_F + '''"
#apply patches
sed -i ${WORKSPACE}/targetdwn/Dockerfile \
  -e "s#FROM registry.redhat.io/#FROM #g" \
  -e "s#FROM registry.access.redhat.com/#FROM #g"

METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + SYNC_REPO + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + SYNC_REPO + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
'''

        // push changes in github to dist-git
        util.updateBaseImages("${WORKSPACE}/targetdwn", MIDSTM_BRANCH, "--nocommit")
        sh '''#!/bin/bash -xe
export KRB5CCNAME=/var/tmp/crw-build_ccache
cd ${WORKSPACE}/targetdwn
if [[ \$(git diff --name-only) ]]; then # file changed
  git add Dockerfile ''' + SYNC_FILES + ''' . -A -f
  # note this might fail if we're syncing from a tag vs. a branch
  git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''" Dockerfile ''' + SYNC_FILES + ''' . || true
  git push origin ''' + MIDSTM_BRANCH + ''' || true
  echo "[sync] Updated pkgs.devel @ \$(git rev-parse --short=4 HEAD) from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA + '''"
fi
cd ..
'''
        }
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got NEW_SHA in targetdwn folder: " + NEW_SHA

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      }
    }
  }
}

// kick off get-sources-rhpkg-container-build_2.y job
node(nodeLabel){ 
  stage ("Build container on ${nodeLabel}") {
    println "########################################################################################################"
    println "##  Build ${SYNC_REPO} containers"
    println "########################################################################################################"
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/'+ MIDSTM_BRANCH + '/product/util.groovy')
    def util = load "${WORKSPACE}/util.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
      if (!NEW_SHA.equals(OLD_SHA) || FORCE_BUILD.equals("true")) {
        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
        build(
              job: 'get-sources-rhpkg-container-build_' + JOB_BRANCH,
              wait: false,
              propagate: false,
              parameters: [
                [
                  $class: 'StringParameterValue',
                  name: 'token',
                  value: "CI_BUILD"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'cause',
                  value: "${SYNC_REPO}+respin+by+${BUILD_TAG}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_BRANCH',
                  value: "${MIDSTM_BRANCH}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'GIT_PATHs',
                  value: "${DWNSTM_REPO}"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'QUAY_REPO_PATHs',
                  value: util.getCRWShortName(SYNC_REPO) + "-rhel8"
                ],
                [
                  $class: 'StringParameterValue',
                  name: 'JOB_BRANCH',
                  value: JOB_BRANCH
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'FORCE_BUILD',
                  value: true
                ],
                [
                  $class: 'BooleanParameterValue',
                  name: 'SCRATCH',
                  value: false
                ]
              ]
        )
        currentBuild.description="Brew build triggered"
      } else {
        println "No changes upstream, nothing to build in brew!"
        currentBuild.description="No Brew build"
        currentBuild.result = 'UNSTABLE'
      }
    } else {
      util.notifyBuildFailed()
    } // if
  } // stage
} //node
